
datkll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  24000010  08009d7c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000224  08009d7c  00020224  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000240e7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000351c  00000000  00000000  00044125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00047648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010b8  00000000  00000000  000487f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000033d8  00000000  00000000  000498b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018d3f  00000000  00000000  0004cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164acc  00000000  00000000  000659c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ca493  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ae4  00000000  00000000  001ca4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009d04 	.word	0x08009d04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009d04 	.word	0x08009d04

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fd78 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f826 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9de 	bl	800099c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 f9b4 	bl	800094c <MX_DMA_Init>
  MX_DCMI_Init();
 80005e4:	f000 f88a 	bl	80006fc <MX_DCMI_Init>
  MX_TIM3_Init();
 80005e8:	f000 f90a 	bl	8000800 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f962 	bl	80008b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f0:	f000 f8b8 	bl	8000764 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x48>)
 80005f6:	f005 ff9f 	bl	8006538 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <main+0x4c>)
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <main+0x50>)
 8000600:	f007 f8d0 	bl	80077a4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //	  sendRun();
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0x54>)
 800060a:	f003 fbcf 	bl	8003dac <HAL_GPIO_WritePin>
//  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
  	  HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 fdec 	bl	80011ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000614:	e7f6      	b.n	8000604 <main+0x34>
 8000616:	bf00      	nop
 8000618:	24000144 	.word	0x24000144
 800061c:	2400002c 	.word	0x2400002c
 8000620:	24000190 	.word	0x24000190
 8000624:	58020400 	.word	0x58020400

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	224c      	movs	r2, #76	; 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f009 fb5c 	bl	8009cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 fb56 	bl	8009cf4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000648:	2002      	movs	r0, #2
 800064a:	f003 fbc9 	bl	8003de0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000658:	f023 0301 	bic.w	r3, r3, #1
 800065c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 8000660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <SystemClock_Config+0xd0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000698:	2301      	movs	r3, #1
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fbd3 	bl	8003e54 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006b4:	f000 f9f2 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	233f      	movs	r3, #63	; 0x3f
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ffe5 	bl	80046ac <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 f9d8 	bl	8000a9c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3770      	adds	r7, #112	; 0x70
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58000400 	.word	0x58000400
 80006f8:	58024800 	.word	0x58024800

080006fc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_DCMI_Init+0x60>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_DCMI_Init+0x64>)
 8000704:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_DCMI_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_DCMI_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_DCMI_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_DCMI_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_DCMI_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_DCMI_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DCMI_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_DCMI_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DCMI_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_DCMI_Init+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_DCMI_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_DCMI_Init+0x60>)
 800074a:	f000 fe8f 	bl	800146c <HAL_DCMI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f9a2 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	240000f4 	.word	0x240000f4
 8000760:	48020000 	.word	0x48020000

08000764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_TIM2_Init+0x98>)
 8000784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000788:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_TIM2_Init+0x98>)
 800078c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_TIM2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_TIM2_Init+0x98>)
 800079a:	223f      	movs	r2, #63	; 0x3f
 800079c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_TIM2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_TIM2_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_TIM2_Init+0x98>)
 80007ac:	f005 fe6c 	bl	8006488 <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007b6:	f000 f971 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM2_Init+0x98>)
 80007c8:	f006 f9b8 	bl	8006b3c <HAL_TIM_ConfigClockSource>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007d2:	f000 f963 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_TIM2_Init+0x98>)
 80007e4:	f006 fee2 	bl	80075ac <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f955 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	24000144 	.word	0x24000144

08000800 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_TIM3_Init+0xac>)
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <MX_TIM3_Init+0xb0>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_TIM3_Init+0xac>)
 800082c:	223f      	movs	r2, #63	; 0x3f
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM3_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM3_Init+0xac>)
 8000838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800083c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_TIM3_Init+0xac>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM3_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <MX_TIM3_Init+0xac>)
 800084c:	f005 feec 	bl	8006628 <HAL_TIM_PWM_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000856:	f000 f921 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_TIM3_Init+0xac>)
 800086a:	f006 fe9f 	bl	80075ac <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000874:	f000 f912 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000878:	2360      	movs	r3, #96	; 0x60
 800087a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_TIM3_Init+0xac>)
 8000890:	f006 f840 	bl	8006914 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800089a:	f000 f8ff 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <MX_TIM3_Init+0xac>)
 80008a0:	f000 fa68 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	240000a8 	.word	0x240000a8
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_USART2_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x90>)
 80008fe:	f006 ff01 	bl	8007704 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f8c8 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_USART2_UART_Init+0x90>)
 8000910:	f009 f901 	bl	8009b16 <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f8bf 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x90>)
 8000922:	f009 f936 	bl	8009b92 <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f8b6 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART2_UART_Init+0x90>)
 8000932:	f009 f8b7 	bl	8009aa4 <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f8ae 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000190 	.word	0x24000190
 8000948:	40004400 	.word	0x40004400

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_DMA_Init+0x4c>)
 8000954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <MX_DMA_Init+0x4c>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_DMA_Init+0x4c>)
 8000964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200b      	movs	r0, #11
 8000976:	f000 fd44 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800097a:	200b      	movs	r0, #11
 800097c:	f000 fd5b 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2066      	movs	r0, #102	; 0x66
 8000986:	f000 fd3c 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800098a:	2066      	movs	r0, #102	; 0x66
 800098c:	f000 fd53 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <MX_GPIO_Init+0xf8>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_GPIO_Init+0xf8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2101      	movs	r1, #1
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0xfc>)
 8000a6c:	f003 f99e 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0xfc>)
 8000a88:	f002 ffe0 	bl	8003a4c <HAL_GPIO_Init>

}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020400 	.word	0x58020400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	58024400 	.word	0x58024400

08000adc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a71      	ldr	r2, [pc, #452]	; (8000cc0 <HAL_DCMI_MspInit+0x1e4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 80dc 	bne.w	8000cb8 <HAL_DCMI_MspInit+0x1dc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b00:	4b70      	ldr	r3, [pc, #448]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b06:	4a6f      	ldr	r2, [pc, #444]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000b10:	4b6c      	ldr	r3, [pc, #432]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	4b69      	ldr	r3, [pc, #420]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a67      	ldr	r2, [pc, #412]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b65      	ldr	r3, [pc, #404]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b61      	ldr	r3, [pc, #388]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a60      	ldr	r2, [pc, #384]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b5a      	ldr	r3, [pc, #360]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a58      	ldr	r2, [pc, #352]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b4e      	ldr	r3, [pc, #312]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <HAL_DCMI_MspInit+0x1e8>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bb4:	2370      	movs	r3, #112	; 0x70
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bc4:	230d      	movs	r3, #13
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483e      	ldr	r0, [pc, #248]	; (8000cc8 <HAL_DCMI_MspInit+0x1ec>)
 8000bd0:	f002 ff3c 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000bd4:	2350      	movs	r3, #80	; 0x50
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000be4:	230d      	movs	r3, #13
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4837      	ldr	r0, [pc, #220]	; (8000ccc <HAL_DCMI_MspInit+0x1f0>)
 8000bf0:	f002 ff2c 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000bf4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c06:	230d      	movs	r3, #13
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	482f      	ldr	r0, [pc, #188]	; (8000cd0 <HAL_DCMI_MspInit+0x1f4>)
 8000c12:	f002 ff1b 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c16:	2308      	movs	r3, #8
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c26:	230d      	movs	r3, #13
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4828      	ldr	r0, [pc, #160]	; (8000cd4 <HAL_DCMI_MspInit+0x1f8>)
 8000c32:	f002 ff0b 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c48:	230d      	movs	r3, #13
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <HAL_DCMI_MspInit+0x1fc>)
 8000c54:	f002 fefa 	bl	8003a4c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <HAL_DCMI_MspInit+0x204>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c60:	224b      	movs	r2, #75	; 0x4b
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000c9e:	f000 fc5f 	bl	8001560 <HAL_DMA_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_DCMI_MspInit+0x1d0>
    {
      Error_Handler();
 8000ca8:	f7ff fef8 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000cb0:	649a      	str	r2, [r3, #72]	; 0x48
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_DCMI_MspInit+0x200>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	48020000 	.word	0x48020000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	58020000 	.word	0x58020000
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020c00 	.word	0x58020c00
 8000cd8:	58021800 	.word	0x58021800
 8000cdc:	24000030 	.word	0x24000030
 8000ce0:	40020010 	.word	0x40020010

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d116      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	201c      	movs	r0, #28
 8000d1a:	f000 fb72 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1e:	201c      	movs	r0, #28
 8000d20:	f000 fb89 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10e      	bne.n	8000d60 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_TIM_PWM_MspInit+0x40>)
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_PWM_MspInit+0x40>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_PWM_MspInit+0x40>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	58024400 	.word	0x58024400

08000d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_TIM_MspPostInit+0x68>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11e      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_TIM_MspPostInit+0x6c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_MspPostInit+0x6c>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_MspPostInit+0x6c>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db4:	2310      	movs	r3, #16
 8000db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_MspPostInit+0x70>)
 8000dd0:	f002 fe3c 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020400 	.word	0x58020400

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0b8      	sub	sp, #224	; 0xe0
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	22bc      	movs	r2, #188	; 0xbc
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f008 ff73 	bl	8009cf4 <memset>
  if(huart->Instance==USART2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_UART_MspInit+0xcc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d149      	bne.n	8000eac <HAL_UART_MspInit+0xc4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 ffcc 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e32:	f7ff fe33 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <HAL_UART_MspInit+0xd0>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e72:	230c      	movs	r3, #12
 8000e74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e94:	4619      	mov	r1, r3
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <HAL_UART_MspInit+0xd4>)
 8000e98:	f002 fdd8 	bl	8003a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2026      	movs	r0, #38	; 0x26
 8000ea2:	f000 faae 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea6:	2026      	movs	r0, #38	; 0x26
 8000ea8:	f000 fac5 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	37e0      	adds	r7, #224	; 0xe0
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020000 	.word	0x58020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f94e 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <DMA1_Stream0_IRQHandler+0x10>)
 8000f1a:	f001 fbdf 	bl	80026dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000030 	.word	0x24000030

08000f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM2_IRQHandler+0x10>)
 8000f2e:	f005 fbd2 	bl	80066d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000144 	.word	0x24000144

08000f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART2_IRQHandler+0x10>)
 8000f42:	f006 fc85 	bl	8007850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24000190 	.word	0x24000190

08000f50 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream0
  HAL_DMAEx_MUX_IRQHandler(&hdma_dcmi);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMAMUX1_OVR_IRQHandler+0x10>)
 8000f56:	f002 fd27 	bl	80039a8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	24000030 	.word	0x24000030

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <SystemInit+0xe4>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a36      	ldr	r2, [pc, #216]	; (8001048 <SystemInit+0xe4>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <SystemInit+0xe8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d807      	bhi.n	8000f94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <SystemInit+0xe8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f023 030f 	bic.w	r3, r3, #15
 8000f8c:	4a2f      	ldr	r2, [pc, #188]	; (800104c <SystemInit+0xe8>)
 8000f8e:	f043 0307 	orr.w	r3, r3, #7
 8000f92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <SystemInit+0xec>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <SystemInit+0xec>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <SystemInit+0xec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <SystemInit+0xec>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4929      	ldr	r1, [pc, #164]	; (8001050 <SystemInit+0xec>)
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SystemInit+0xf0>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <SystemInit+0xe8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <SystemInit+0xe8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 030f 	bic.w	r3, r3, #15
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <SystemInit+0xe8>)
 8000fc8:	f043 0307 	orr.w	r3, r3, #7
 8000fcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <SystemInit+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <SystemInit+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <SystemInit+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SystemInit+0xec>)
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <SystemInit+0xf4>)
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SystemInit+0xec>)
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <SystemInit+0xf8>)
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <SystemInit+0xec>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <SystemInit+0xfc>)
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <SystemInit+0xec>)
 8000ffa:	4a19      	ldr	r2, [pc, #100]	; (8001060 <SystemInit+0xfc>)
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <SystemInit+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <SystemInit+0xec>)
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <SystemInit+0xfc>)
 8001008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <SystemInit+0xec>)
 800100c:	2200      	movs	r2, #0
 800100e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SystemInit+0xec>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <SystemInit+0xec>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <SystemInit+0xec>)
 800101e:	2200      	movs	r2, #0
 8001020:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <SystemInit+0x100>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SystemInit+0x104>)
 8001028:	4013      	ands	r3, r2
 800102a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800102e:	d202      	bcs.n	8001036 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <SystemInit+0x108>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <SystemInit+0x10c>)
 8001038:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800103c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	52002000 	.word	0x52002000
 8001050:	58024400 	.word	0x58024400
 8001054:	eaf6ed7f 	.word	0xeaf6ed7f
 8001058:	02020200 	.word	0x02020200
 800105c:	01ff0000 	.word	0x01ff0000
 8001060:	01010280 	.word	0x01010280
 8001064:	5c001000 	.word	0x5c001000
 8001068:	ffff0000 	.word	0xffff0000
 800106c:	51008108 	.word	0x51008108
 8001070:	52004000 	.word	0x52004000

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001078:	f7ff ff74 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	; (80010c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f008 fe03 	bl	8009cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fa93 	bl	80005d0 <main>
  bx  lr
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010b8:	08009d6c 	.word	0x08009d6c
  ldr r2, =_sbss
 80010bc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010c0:	24000224 	.word	0x24000224

080010c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC3_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f98c 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010d4:	f003 fca0 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_Init+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	4913      	ldr	r1, [pc, #76]	; (8001134 <HAL_Init+0x6c>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_Init+0x6c>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_Init+0x70>)
 800110a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_Init+0x74>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f814 	bl	8001140 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e002      	b.n	8001128 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001122:	f7ff fcc1 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58024400 	.word	0x58024400
 8001134:	08009d1c 	.word	0x08009d1c
 8001138:	24000004 	.word	0x24000004
 800113c:	24000000 	.word	0x24000000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_InitTick+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e021      	b.n	8001198 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_InitTick+0x64>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_InitTick+0x60>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f971 	bl	8001452 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f93b 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x68>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	24000000 	.word	0x24000000
 80011a8:	24000008 	.word	0x24000008

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2400000c 	.word	0x2400000c
 80011d0:	24000220 	.word	0x24000220

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	24000220 	.word	0x24000220

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2400000c 	.word	0x2400000c

08001234 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetREVID+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1b      	lsrs	r3, r3, #16
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	5c001000 	.word	0x5c001000

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	4313      	orrs	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	05fa0000 	.word	0x05fa0000

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff40 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff33 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa4 	bl	80013a8 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e069      	b.n	8001552 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fb26 	bl	8000adc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_DCMI_Init+0xf0>)
 80014b2:	400b      	ands	r3, r1
 80014b4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80014d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80014e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80014ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80014fa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d112      	bne.n	8001532 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7f1b      	ldrb	r3, [r3, #28]
 8001510:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f5b      	ldrb	r3, [r3, #29]
 8001516:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001518:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7f9b      	ldrb	r3, [r3, #30]
 800151e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001520:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7fdb      	ldrb	r3, [r3, #31]
 8001528:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800152e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001530:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 021e 	orr.w	r2, r2, #30
 8001540:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	ffe0f007 	.word	0xffe0f007

08001560 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fe34 	bl	80011d4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e316      	b.n	8001ba6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a66      	ldr	r2, [pc, #408]	; (8001718 <HAL_DMA_Init+0x1b8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d04a      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_DMA_Init+0x1bc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d045      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a63      	ldr	r2, [pc, #396]	; (8001720 <HAL_DMA_Init+0x1c0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d040      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a62      	ldr	r2, [pc, #392]	; (8001724 <HAL_DMA_Init+0x1c4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d03b      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a60      	ldr	r2, [pc, #384]	; (8001728 <HAL_DMA_Init+0x1c8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d036      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_DMA_Init+0x1cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d031      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5d      	ldr	r2, [pc, #372]	; (8001730 <HAL_DMA_Init+0x1d0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02c      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5c      	ldr	r2, [pc, #368]	; (8001734 <HAL_DMA_Init+0x1d4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d027      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_DMA_Init+0x1d8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d022      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a59      	ldr	r2, [pc, #356]	; (800173c <HAL_DMA_Init+0x1dc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d01d      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_DMA_Init+0x1e0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d018      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a56      	ldr	r2, [pc, #344]	; (8001744 <HAL_DMA_Init+0x1e4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_DMA_Init+0x1e8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a53      	ldr	r2, [pc, #332]	; (800174c <HAL_DMA_Init+0x1ec>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d009      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_DMA_Init+0x1f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_DMA_Init+0xb8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_DMA_Init+0x1f4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_DMA_Init+0xbc>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_DMA_Init+0xbe>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 813b 	beq.w	800189a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a37      	ldr	r2, [pc, #220]	; (8001718 <HAL_DMA_Init+0x1b8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d04a      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a36      	ldr	r2, [pc, #216]	; (800171c <HAL_DMA_Init+0x1bc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d045      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_DMA_Init+0x1c0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d040      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <HAL_DMA_Init+0x1c4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d03b      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_DMA_Init+0x1c8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d036      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a30      	ldr	r2, [pc, #192]	; (800172c <HAL_DMA_Init+0x1cc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d031      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_DMA_Init+0x1d0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02c      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <HAL_DMA_Init+0x1d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d027      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <HAL_DMA_Init+0x1d8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d022      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_DMA_Init+0x1dc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d01d      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_DMA_Init+0x1e0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d018      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_DMA_Init+0x1e4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_DMA_Init+0x1e8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00e      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_DMA_Init+0x1ec>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d009      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_DMA_Init+0x1f0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d004      	beq.n	80016d4 <HAL_DMA_Init+0x174>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_DMA_Init+0x1f4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d108      	bne.n	80016e6 <HAL_DMA_Init+0x186>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_DMA_Init+0x196>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016f6:	e02f      	b.n	8001758 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f8:	f7ff fd6c 	bl	80011d4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d928      	bls.n	8001758 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e246      	b.n	8001ba6 <HAL_DMA_Init+0x646>
 8001718:	40020010 	.word	0x40020010
 800171c:	40020028 	.word	0x40020028
 8001720:	40020040 	.word	0x40020040
 8001724:	40020058 	.word	0x40020058
 8001728:	40020070 	.word	0x40020070
 800172c:	40020088 	.word	0x40020088
 8001730:	400200a0 	.word	0x400200a0
 8001734:	400200b8 	.word	0x400200b8
 8001738:	40020410 	.word	0x40020410
 800173c:	40020428 	.word	0x40020428
 8001740:	40020440 	.word	0x40020440
 8001744:	40020458 	.word	0x40020458
 8001748:	40020470 	.word	0x40020470
 800174c:	40020488 	.word	0x40020488
 8001750:	400204a0 	.word	0x400204a0
 8001754:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1c8      	bne.n	80016f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4b83      	ldr	r3, [pc, #524]	; (8001980 <HAL_DMA_Init+0x420>)
 8001772:	4013      	ands	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800177e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d107      	bne.n	80017bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4313      	orrs	r3, r2
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017bc:	4b71      	ldr	r3, [pc, #452]	; (8001984 <HAL_DMA_Init+0x424>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b71      	ldr	r3, [pc, #452]	; (8001988 <HAL_DMA_Init+0x428>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017c8:	d328      	bcc.n	800181c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b28      	cmp	r3, #40	; 0x28
 80017d0:	d903      	bls.n	80017da <HAL_DMA_Init+0x27a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b2e      	cmp	r3, #46	; 0x2e
 80017d8:	d917      	bls.n	800180a <HAL_DMA_Init+0x2aa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b3e      	cmp	r3, #62	; 0x3e
 80017e0:	d903      	bls.n	80017ea <HAL_DMA_Init+0x28a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b42      	cmp	r3, #66	; 0x42
 80017e8:	d90f      	bls.n	800180a <HAL_DMA_Init+0x2aa>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b46      	cmp	r3, #70	; 0x46
 80017f0:	d903      	bls.n	80017fa <HAL_DMA_Init+0x29a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b48      	cmp	r3, #72	; 0x48
 80017f8:	d907      	bls.n	800180a <HAL_DMA_Init+0x2aa>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b4e      	cmp	r3, #78	; 0x4e
 8001800:	d905      	bls.n	800180e <HAL_DMA_Init+0x2ae>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b52      	cmp	r3, #82	; 0x52
 8001808:	d801      	bhi.n	800180e <HAL_DMA_Init+0x2ae>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_DMA_Init+0x2b0>
 800180e:	2300      	movs	r3, #0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800181a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f023 0307 	bic.w	r3, r3, #7
 8001832:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	2b04      	cmp	r3, #4
 8001844:	d117      	bne.n	8001876 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f001 ff1b 	bl	8003694 <DMA_CheckFifoParam>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e197      	b.n	8001ba6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 fe56 	bl	8003530 <DMA_CalcBaseAndBitshift>
 8001884:	4603      	mov	r3, r0
 8001886:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	223f      	movs	r2, #63	; 0x3f
 8001892:	409a      	lsls	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e0cd      	b.n	8001a36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_DMA_Init+0x42c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a39      	ldr	r2, [pc, #228]	; (8001990 <HAL_DMA_Init+0x430>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01d      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_DMA_Init+0x434>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d018      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a36      	ldr	r2, [pc, #216]	; (8001998 <HAL_DMA_Init+0x438>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <HAL_DMA_Init+0x43c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00e      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_DMA_Init+0x440>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d009      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_DMA_Init+0x444>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d004      	beq.n	80018ea <HAL_DMA_Init+0x38a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_DMA_Init+0x448>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_DMA_Init+0x38e>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_Init+0x390>
 80018ee:	2300      	movs	r3, #0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8097 	beq.w	8001a24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_DMA_Init+0x42c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d021      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_DMA_Init+0x430>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01c      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_DMA_Init+0x434>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d017      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <HAL_DMA_Init+0x438>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d012      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <HAL_DMA_Init+0x43c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_DMA_Init+0x440>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_DMA_Init+0x444>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_DMA_Init+0x3e4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_DMA_Init+0x448>)
 8001942:	4293      	cmp	r3, r2
 8001944:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_DMA_Init+0x44c>)
 8001962:	4013      	ands	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d020      	beq.n	80019b0 <HAL_DMA_Init+0x450>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	d102      	bne.n	800197c <HAL_DMA_Init+0x41c>
 8001976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197a:	e01a      	b.n	80019b2 <HAL_DMA_Init+0x452>
 800197c:	2300      	movs	r3, #0
 800197e:	e018      	b.n	80019b2 <HAL_DMA_Init+0x452>
 8001980:	fe10803f 	.word	0xfe10803f
 8001984:	5c001000 	.word	0x5c001000
 8001988:	ffff0000 	.word	0xffff0000
 800198c:	58025408 	.word	0x58025408
 8001990:	5802541c 	.word	0x5802541c
 8001994:	58025430 	.word	0x58025430
 8001998:	58025444 	.word	0x58025444
 800199c:	58025458 	.word	0x58025458
 80019a0:	5802546c 	.word	0x5802546c
 80019a4:	58025480 	.word	0x58025480
 80019a8:	58025494 	.word	0x58025494
 80019ac:	fffe000f 	.word	0xfffe000f
 80019b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68d2      	ldr	r2, [r2, #12]
 80019b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_DMA_Init+0x650>)
 80019f8:	4413      	add	r3, r2
 80019fa:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_DMA_Init+0x654>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 fd91 	bl	8003530 <DMA_CalcBaseAndBitshift>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e008      	b.n	8001a36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0b7      	b.n	8001ba6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_DMA_Init+0x658>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d072      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_DMA_Init+0x65c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d06d      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_DMA_Init+0x660>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d068      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_DMA_Init+0x664>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d063      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a59      	ldr	r2, [pc, #356]	; (8001bc8 <HAL_DMA_Init+0x668>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d05e      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_DMA_Init+0x66c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d059      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_DMA_Init+0x670>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d054      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_DMA_Init+0x674>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d04f      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_DMA_Init+0x678>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04a      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_DMA_Init+0x67c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d045      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_DMA_Init+0x680>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d040      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a4e      	ldr	r2, [pc, #312]	; (8001be4 <HAL_DMA_Init+0x684>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d03b      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_DMA_Init+0x688>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_DMA_Init+0x68c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_DMA_Init+0x690>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d02c      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_DMA_Init+0x694>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d027      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_DMA_Init+0x698>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <HAL_DMA_Init+0x69c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01d      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <HAL_DMA_Init+0x6a0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_DMA_Init+0x6a4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <HAL_DMA_Init+0x6a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3f      	ldr	r2, [pc, #252]	; (8001c0c <HAL_DMA_Init+0x6ac>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3e      	ldr	r2, [pc, #248]	; (8001c10 <HAL_DMA_Init+0x6b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_Init+0x5c6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3c      	ldr	r2, [pc, #240]	; (8001c14 <HAL_DMA_Init+0x6b4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Init+0x5ca>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_Init+0x5cc>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f001 fe2b 	bl	800378c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b80      	cmp	r3, #128	; 0x80
 8001b3c:	d102      	bne.n	8001b44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <HAL_DMA_Init+0x624>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d80c      	bhi.n	8001b84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f001 fea8 	bl	80038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	e008      	b.n	8001b96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	a7fdabf8 	.word	0xa7fdabf8
 8001bb4:	cccccccd 	.word	0xcccccccd
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
 8001bf8:	58025408 	.word	0x58025408
 8001bfc:	5802541c 	.word	0x5802541c
 8001c00:	58025430 	.word	0x58025430
 8001c04:	58025444 	.word	0x58025444
 8001c08:	58025458 	.word	0x58025458
 8001c0c:	5802546c 	.word	0x5802546c
 8001c10:	58025480 	.word	0x58025480
 8001c14:	58025494 	.word	0x58025494

08001c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fad8 	bl	80011d4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e2dc      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d008      	beq.n	8001c4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e2cd      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a76      	ldr	r2, [pc, #472]	; (8001e2c <HAL_DMA_Abort+0x214>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04a      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a74      	ldr	r2, [pc, #464]	; (8001e30 <HAL_DMA_Abort+0x218>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d045      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <HAL_DMA_Abort+0x21c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d040      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_DMA_Abort+0x220>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d03b      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a70      	ldr	r2, [pc, #448]	; (8001e3c <HAL_DMA_Abort+0x224>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d036      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_DMA_Abort+0x228>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6d      	ldr	r2, [pc, #436]	; (8001e44 <HAL_DMA_Abort+0x22c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d02c      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6b      	ldr	r2, [pc, #428]	; (8001e48 <HAL_DMA_Abort+0x230>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d027      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_DMA_Abort+0x234>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <HAL_DMA_Abort+0x238>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01d      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_DMA_Abort+0x23c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d018      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <HAL_DMA_Abort+0x240>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_DMA_Abort+0x244>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <HAL_DMA_Abort+0x248>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d009      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a61      	ldr	r2, [pc, #388]	; (8001e64 <HAL_DMA_Abort+0x24c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_DMA_Abort+0x250>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_Abort+0xda>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_DMA_Abort+0xdc>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 021e 	bic.w	r2, r2, #30
 8001d06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e00a      	b.n	8001d36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020e 	bic.w	r2, r2, #14
 8001d2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <HAL_DMA_Abort+0x214>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d072      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_DMA_Abort+0x218>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d06d      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_DMA_Abort+0x21c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d068      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_DMA_Abort+0x220>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d063      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_DMA_Abort+0x224>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_DMA_Abort+0x228>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d059      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_DMA_Abort+0x22c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d054      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DMA_Abort+0x230>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04f      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DMA_Abort+0x234>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04a      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_DMA_Abort+0x238>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d045      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_DMA_Abort+0x23c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d040      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Abort+0x240>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d03b      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_DMA_Abort+0x244>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d036      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Abort+0x248>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_Abort+0x24c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d02c      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Abort+0x250>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d027      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_DMA_Abort+0x254>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Abort+0x258>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01d      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Abort+0x25c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_DMA_Abort+0x260>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_DMA_Abort+0x264>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_DMA_Abort+0x268>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_DMA_Abort+0x26c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_DMA_Abort+0x270>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d132      	bne.n	8001e8c <HAL_DMA_Abort+0x274>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e031      	b.n	8001e8e <HAL_DMA_Abort+0x276>
 8001e2a:	bf00      	nop
 8001e2c:	40020010 	.word	0x40020010
 8001e30:	40020028 	.word	0x40020028
 8001e34:	40020040 	.word	0x40020040
 8001e38:	40020058 	.word	0x40020058
 8001e3c:	40020070 	.word	0x40020070
 8001e40:	40020088 	.word	0x40020088
 8001e44:	400200a0 	.word	0x400200a0
 8001e48:	400200b8 	.word	0x400200b8
 8001e4c:	40020410 	.word	0x40020410
 8001e50:	40020428 	.word	0x40020428
 8001e54:	40020440 	.word	0x40020440
 8001e58:	40020458 	.word	0x40020458
 8001e5c:	40020470 	.word	0x40020470
 8001e60:	40020488 	.word	0x40020488
 8001e64:	400204a0 	.word	0x400204a0
 8001e68:	400204b8 	.word	0x400204b8
 8001e6c:	58025408 	.word	0x58025408
 8001e70:	5802541c 	.word	0x5802541c
 8001e74:	58025430 	.word	0x58025430
 8001e78:	58025444 	.word	0x58025444
 8001e7c:	58025458 	.word	0x58025458
 8001e80:	5802546c 	.word	0x5802546c
 8001e84:	58025480 	.word	0x58025480
 8001e88:	58025494 	.word	0x58025494
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6d      	ldr	r2, [pc, #436]	; (800205c <HAL_DMA_Abort+0x444>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d04a      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_DMA_Abort+0x448>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d045      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_DMA_Abort+0x44c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d040      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	; (8002068 <HAL_DMA_Abort+0x450>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d03b      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_DMA_Abort+0x454>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d036      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_DMA_Abort+0x458>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_DMA_Abort+0x45c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d02c      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a62      	ldr	r2, [pc, #392]	; (8002078 <HAL_DMA_Abort+0x460>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d027      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a61      	ldr	r2, [pc, #388]	; (800207c <HAL_DMA_Abort+0x464>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_DMA_Abort+0x468>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01d      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5e      	ldr	r2, [pc, #376]	; (8002084 <HAL_DMA_Abort+0x46c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d018      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_DMA_Abort+0x470>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_DMA_Abort+0x474>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00e      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a59      	ldr	r2, [pc, #356]	; (8002090 <HAL_DMA_Abort+0x478>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_DMA_Abort+0x47c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_DMA_Abort+0x480>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <HAL_DMA_Abort+0x33c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e007      	b.n	8001f64 <HAL_DMA_Abort+0x34c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f64:	e013      	b.n	8001f8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff f935 	bl	80011d4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d90c      	bls.n	8001f8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12d      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_DMA_Abort+0x444>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04a      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_DMA_Abort+0x448>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d045      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_DMA_Abort+0x44c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d040      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_DMA_Abort+0x450>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d03b      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_DMA_Abort+0x454>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_DMA_Abort+0x458>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d031      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_DMA_Abort+0x45c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d02c      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_Abort+0x460>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d027      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_DMA_Abort+0x464>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d022      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_Abort+0x468>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_DMA_Abort+0x46c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_DMA_Abort+0x470>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_DMA_Abort+0x474>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Abort+0x422>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_DMA_Abort+0x478>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_DMA_Abort+0x47c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_DMA_Abort+0x480>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_DMA_Abort+0x426>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_DMA_Abort+0x428>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02b      	beq.n	800209c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	223f      	movs	r2, #63	; 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	e02a      	b.n	80020b2 <HAL_DMA_Abort+0x49a>
 800205c:	40020010 	.word	0x40020010
 8002060:	40020028 	.word	0x40020028
 8002064:	40020040 	.word	0x40020040
 8002068:	40020058 	.word	0x40020058
 800206c:	40020070 	.word	0x40020070
 8002070:	40020088 	.word	0x40020088
 8002074:	400200a0 	.word	0x400200a0
 8002078:	400200b8 	.word	0x400200b8
 800207c:	40020410 	.word	0x40020410
 8002080:	40020428 	.word	0x40020428
 8002084:	40020440 	.word	0x40020440
 8002088:	40020458 	.word	0x40020458
 800208c:	40020470 	.word	0x40020470
 8002090:	40020488 	.word	0x40020488
 8002094:	400204a0 	.word	0x400204a0
 8002098:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_DMA_Abort+0x5dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d072      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_DMA_Abort+0x5e0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d06d      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_DMA_Abort+0x5e4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d068      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_DMA_Abort+0x5e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d063      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_DMA_Abort+0x5ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_DMA_Abort+0x5f0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d059      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_DMA_Abort+0x5f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d054      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_DMA_Abort+0x5f8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_DMA_Abort+0x5fc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_DMA_Abort+0x600>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <HAL_DMA_Abort+0x604>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <HAL_DMA_Abort+0x608>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <HAL_DMA_Abort+0x60c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_DMA_Abort+0x610>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_DMA_Abort+0x614>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_DMA_Abort+0x618>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a37      	ldr	r2, [pc, #220]	; (8002234 <HAL_DMA_Abort+0x61c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a35      	ldr	r2, [pc, #212]	; (8002238 <HAL_DMA_Abort+0x620>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_DMA_Abort+0x624>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_DMA_Abort+0x628>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_DMA_Abort+0x62c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <HAL_DMA_Abort+0x630>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2e      	ldr	r2, [pc, #184]	; (800224c <HAL_DMA_Abort+0x634>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_DMA_Abort+0x638>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Abort+0x58e>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_DMA_Abort+0x590>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	5802541c 	.word	0x5802541c
 800223c:	58025430 	.word	0x58025430
 8002240:	58025444 	.word	0x58025444
 8002244:	58025458 	.word	0x58025458
 8002248:	5802546c 	.word	0x5802546c
 800224c:	58025480 	.word	0x58025480
 8002250:	58025494 	.word	0x58025494

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e205      	b.n	8002672 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d004      	beq.n	800227c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e1fa      	b.n	8002672 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a8c      	ldr	r2, [pc, #560]	; (80024b4 <HAL_DMA_Abort_IT+0x260>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a8b      	ldr	r2, [pc, #556]	; (80024b8 <HAL_DMA_Abort_IT+0x264>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a89      	ldr	r2, [pc, #548]	; (80024bc <HAL_DMA_Abort_IT+0x268>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a88      	ldr	r2, [pc, #544]	; (80024c0 <HAL_DMA_Abort_IT+0x26c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a86      	ldr	r2, [pc, #536]	; (80024c4 <HAL_DMA_Abort_IT+0x270>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a85      	ldr	r2, [pc, #532]	; (80024c8 <HAL_DMA_Abort_IT+0x274>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a83      	ldr	r2, [pc, #524]	; (80024cc <HAL_DMA_Abort_IT+0x278>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a82      	ldr	r2, [pc, #520]	; (80024d0 <HAL_DMA_Abort_IT+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_DMA_Abort_IT+0x280>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <HAL_DMA_Abort_IT+0x284>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7d      	ldr	r2, [pc, #500]	; (80024dc <HAL_DMA_Abort_IT+0x288>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7c      	ldr	r2, [pc, #496]	; (80024e0 <HAL_DMA_Abort_IT+0x28c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_DMA_Abort_IT+0x290>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a79      	ldr	r2, [pc, #484]	; (80024e8 <HAL_DMA_Abort_IT+0x294>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_DMA_Abort_IT+0x298>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a76      	ldr	r2, [pc, #472]	; (80024f0 <HAL_DMA_Abort_IT+0x29c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Abort_IT+0xcc>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_DMA_Abort_IT+0xce>
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d065      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2204      	movs	r2, #4
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_DMA_Abort_IT+0x260>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <HAL_DMA_Abort_IT+0x264>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_DMA_Abort_IT+0x268>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5b      	ldr	r2, [pc, #364]	; (80024c0 <HAL_DMA_Abort_IT+0x26c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_DMA_Abort_IT+0x270>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_DMA_Abort_IT+0x274>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_DMA_Abort_IT+0x278>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a55      	ldr	r2, [pc, #340]	; (80024d0 <HAL_DMA_Abort_IT+0x27c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_DMA_Abort_IT+0x280>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_DMA_Abort_IT+0x284>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_DMA_Abort_IT+0x288>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_DMA_Abort_IT+0x28c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_DMA_Abort_IT+0x290>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_DMA_Abort_IT+0x294>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_DMA_Abort_IT+0x298>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_Abort_IT+0x17a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a49      	ldr	r2, [pc, #292]	; (80024f0 <HAL_DMA_Abort_IT+0x29c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d108      	bne.n	80023e0 <HAL_DMA_Abort_IT+0x18c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e147      	b.n	8002670 <HAL_DMA_Abort_IT+0x41c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e13e      	b.n	8002670 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 020e 	bic.w	r2, r2, #14
 8002400:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <HAL_DMA_Abort_IT+0x260>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_DMA_Abort_IT+0x264>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a28      	ldr	r2, [pc, #160]	; (80024bc <HAL_DMA_Abort_IT+0x268>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_DMA_Abort_IT+0x26c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_DMA_Abort_IT+0x270>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <HAL_DMA_Abort_IT+0x274>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_DMA_Abort_IT+0x278>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_DMA_Abort_IT+0x27c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_DMA_Abort_IT+0x280>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_DMA_Abort_IT+0x284>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_DMA_Abort_IT+0x288>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_DMA_Abort_IT+0x28c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_DMA_Abort_IT+0x290>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <HAL_DMA_Abort_IT+0x294>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_DMA_Abort_IT+0x298>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x24e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_DMA_Abort_IT+0x29c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d128      	bne.n	80024f4 <HAL_DMA_Abort_IT+0x2a0>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e027      	b.n	8002504 <HAL_DMA_Abort_IT+0x2b0>
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5c      	ldr	r2, [pc, #368]	; (800267c <HAL_DMA_Abort_IT+0x428>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d072      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a5b      	ldr	r2, [pc, #364]	; (8002680 <HAL_DMA_Abort_IT+0x42c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d06d      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a59      	ldr	r2, [pc, #356]	; (8002684 <HAL_DMA_Abort_IT+0x430>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d068      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_DMA_Abort_IT+0x434>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d063      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a56      	ldr	r2, [pc, #344]	; (800268c <HAL_DMA_Abort_IT+0x438>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d05e      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a55      	ldr	r2, [pc, #340]	; (8002690 <HAL_DMA_Abort_IT+0x43c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d059      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a53      	ldr	r2, [pc, #332]	; (8002694 <HAL_DMA_Abort_IT+0x440>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d054      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_DMA_Abort_IT+0x444>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d04f      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_DMA_Abort_IT+0x448>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04a      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_DMA_Abort_IT+0x44c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d045      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_DMA_Abort_IT+0x450>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d040      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <HAL_DMA_Abort_IT+0x454>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d03b      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4a      	ldr	r2, [pc, #296]	; (80026ac <HAL_DMA_Abort_IT+0x458>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d036      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <HAL_DMA_Abort_IT+0x45c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <HAL_DMA_Abort_IT+0x460>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02c      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <HAL_DMA_Abort_IT+0x464>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d027      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a44      	ldr	r2, [pc, #272]	; (80026bc <HAL_DMA_Abort_IT+0x468>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a43      	ldr	r2, [pc, #268]	; (80026c0 <HAL_DMA_Abort_IT+0x46c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01d      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a41      	ldr	r2, [pc, #260]	; (80026c4 <HAL_DMA_Abort_IT+0x470>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d018      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <HAL_DMA_Abort_IT+0x474>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3e      	ldr	r2, [pc, #248]	; (80026cc <HAL_DMA_Abort_IT+0x478>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3d      	ldr	r2, [pc, #244]	; (80026d0 <HAL_DMA_Abort_IT+0x47c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <HAL_DMA_Abort_IT+0x480>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x3a0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <HAL_DMA_Abort_IT+0x484>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_DMA_Abort_IT+0x3a4>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_DMA_Abort_IT+0x3a6>
 80025f8:	2300      	movs	r3, #0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800262c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002644:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800264e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40020010 	.word	0x40020010
 8002680:	40020028 	.word	0x40020028
 8002684:	40020040 	.word	0x40020040
 8002688:	40020058 	.word	0x40020058
 800268c:	40020070 	.word	0x40020070
 8002690:	40020088 	.word	0x40020088
 8002694:	400200a0 	.word	0x400200a0
 8002698:	400200b8 	.word	0x400200b8
 800269c:	40020410 	.word	0x40020410
 80026a0:	40020428 	.word	0x40020428
 80026a4:	40020440 	.word	0x40020440
 80026a8:	40020458 	.word	0x40020458
 80026ac:	40020470 	.word	0x40020470
 80026b0:	40020488 	.word	0x40020488
 80026b4:	400204a0 	.word	0x400204a0
 80026b8:	400204b8 	.word	0x400204b8
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025444 	.word	0x58025444
 80026cc:	58025458 	.word	0x58025458
 80026d0:	5802546c 	.word	0x5802546c
 80026d4:	58025480 	.word	0x58025480
 80026d8:	58025494 	.word	0x58025494

080026dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e8:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_DMA_IRQHandler+0x1ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a67      	ldr	r2, [pc, #412]	; (800288c <HAL_DMA_IRQHandler+0x1b0>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_DMA_IRQHandler+0x1b4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_DMA_IRQHandler+0x1b8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <HAL_DMA_IRQHandler+0x1bc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5a      	ldr	r2, [pc, #360]	; (800289c <HAL_DMA_IRQHandler+0x1c0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a59      	ldr	r2, [pc, #356]	; (80028a0 <HAL_DMA_IRQHandler+0x1c4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <HAL_DMA_IRQHandler+0x1c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <HAL_DMA_IRQHandler+0x1cc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a54      	ldr	r2, [pc, #336]	; (80028ac <HAL_DMA_IRQHandler+0x1d0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a53      	ldr	r2, [pc, #332]	; (80028b0 <HAL_DMA_IRQHandler+0x1d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a51      	ldr	r2, [pc, #324]	; (80028b4 <HAL_DMA_IRQHandler+0x1d8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_DMA_IRQHandler+0x1dc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4e      	ldr	r2, [pc, #312]	; (80028bc <HAL_DMA_IRQHandler+0x1e0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <HAL_DMA_IRQHandler+0x1e4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4b      	ldr	r2, [pc, #300]	; (80028c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_DMA_IRQHandler+0x1ec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_IRQHandler+0xd2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_DMA_IRQHandler+0x1f0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_IRQHandler+0xd6>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_DMA_IRQHandler+0xd8>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 842b 	beq.w	8003010 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2208      	movs	r2, #8
 80027c4:	409a      	lsls	r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80a2 	beq.w	8002914 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <HAL_DMA_IRQHandler+0x1b4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d04a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_DMA_IRQHandler+0x1b8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d045      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <HAL_DMA_IRQHandler+0x1bc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d040      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2a      	ldr	r2, [pc, #168]	; (800289c <HAL_DMA_IRQHandler+0x1c0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d03b      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <HAL_DMA_IRQHandler+0x1c4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d036      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_DMA_IRQHandler+0x1c8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d031      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_DMA_IRQHandler+0x1cc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02c      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_DMA_IRQHandler+0x1d0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d027      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_DMA_IRQHandler+0x1d4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d022      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d01d      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_DMA_IRQHandler+0x1dc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d018      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_DMA_IRQHandler+0x1e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_DMA_IRQHandler+0x1e4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_DMA_IRQHandler+0x1ec>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_DMA_IRQHandler+0x194>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_DMA_IRQHandler+0x1f0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12f      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x1f4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e02e      	b.n	80028e4 <HAL_DMA_IRQHandler+0x208>
 8002886:	bf00      	nop
 8002888:	24000000 	.word	0x24000000
 800288c:	1b4e81b5 	.word	0x1b4e81b5
 8002890:	40020010 	.word	0x40020010
 8002894:	40020028 	.word	0x40020028
 8002898:	40020040 	.word	0x40020040
 800289c:	40020058 	.word	0x40020058
 80028a0:	40020070 	.word	0x40020070
 80028a4:	40020088 	.word	0x40020088
 80028a8:	400200a0 	.word	0x400200a0
 80028ac:	400200b8 	.word	0x400200b8
 80028b0:	40020410 	.word	0x40020410
 80028b4:	40020428 	.word	0x40020428
 80028b8:	40020440 	.word	0x40020440
 80028bc:	40020458 	.word	0x40020458
 80028c0:	40020470 	.word	0x40020470
 80028c4:	40020488 	.word	0x40020488
 80028c8:	400204a0 	.word	0x400204a0
 80028cc:	400204b8 	.word	0x400204b8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_DMA_IRQHandler+0x3f8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d04a      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a67      	ldr	r2, [pc, #412]	; (8002ad8 <HAL_DMA_IRQHandler+0x3fc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d045      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_DMA_IRQHandler+0x400>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d040      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a64      	ldr	r2, [pc, #400]	; (8002ae0 <HAL_DMA_IRQHandler+0x404>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d03b      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a63      	ldr	r2, [pc, #396]	; (8002ae4 <HAL_DMA_IRQHandler+0x408>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d036      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_DMA_IRQHandler+0x40c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a60      	ldr	r2, [pc, #384]	; (8002aec <HAL_DMA_IRQHandler+0x410>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02c      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5e      	ldr	r2, [pc, #376]	; (8002af0 <HAL_DMA_IRQHandler+0x414>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_DMA_IRQHandler+0x418>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5b      	ldr	r2, [pc, #364]	; (8002af8 <HAL_DMA_IRQHandler+0x41c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5a      	ldr	r2, [pc, #360]	; (8002afc <HAL_DMA_IRQHandler+0x420>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_DMA_IRQHandler+0x424>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_DMA_IRQHandler+0x428>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_DMA_IRQHandler+0x42c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_DMA_IRQHandler+0x430>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2ee>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_DMA_IRQHandler+0x434>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10a      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x304>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e003      	b.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f043 0202 	orr.w	r2, r3, #2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2204      	movs	r2, #4
 8002a12:	409a      	lsls	r2, r3
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 808f 	beq.w	8002b3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_DMA_IRQHandler+0x400>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <HAL_DMA_IRQHandler+0x404>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_DMA_IRQHandler+0x408>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <HAL_DMA_IRQHandler+0x40c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_DMA_IRQHandler+0x410>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_DMA_IRQHandler+0x414>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_DMA_IRQHandler+0x418>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_DMA_IRQHandler+0x41c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_DMA_IRQHandler+0x420>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <HAL_DMA_IRQHandler+0x424>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_DMA_IRQHandler+0x428>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_DMA_IRQHandler+0x42c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_DMA_IRQHandler+0x430>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3e2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_DMA_IRQHandler+0x434>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12a      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x438>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e023      	b.n	8002b1c <HAL_DMA_IRQHandler+0x440>
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0204 	orr.w	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2210      	movs	r2, #16
 8002b46:	409a      	lsls	r2, r3
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a6 	beq.w	8002c9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a85      	ldr	r2, [pc, #532]	; (8002d6c <HAL_DMA_IRQHandler+0x690>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d04a      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a83      	ldr	r2, [pc, #524]	; (8002d70 <HAL_DMA_IRQHandler+0x694>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d045      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a82      	ldr	r2, [pc, #520]	; (8002d74 <HAL_DMA_IRQHandler+0x698>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d040      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a80      	ldr	r2, [pc, #512]	; (8002d78 <HAL_DMA_IRQHandler+0x69c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d03b      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7f      	ldr	r2, [pc, #508]	; (8002d7c <HAL_DMA_IRQHandler+0x6a0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d036      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7d      	ldr	r2, [pc, #500]	; (8002d80 <HAL_DMA_IRQHandler+0x6a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7c      	ldr	r2, [pc, #496]	; (8002d84 <HAL_DMA_IRQHandler+0x6a8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d02c      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7a      	ldr	r2, [pc, #488]	; (8002d88 <HAL_DMA_IRQHandler+0x6ac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d027      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a79      	ldr	r2, [pc, #484]	; (8002d8c <HAL_DMA_IRQHandler+0x6b0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a77      	ldr	r2, [pc, #476]	; (8002d90 <HAL_DMA_IRQHandler+0x6b4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a76      	ldr	r2, [pc, #472]	; (8002d94 <HAL_DMA_IRQHandler+0x6b8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d018      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a74      	ldr	r2, [pc, #464]	; (8002d98 <HAL_DMA_IRQHandler+0x6bc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a73      	ldr	r2, [pc, #460]	; (8002d9c <HAL_DMA_IRQHandler+0x6c0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a71      	ldr	r2, [pc, #452]	; (8002da0 <HAL_DMA_IRQHandler+0x6c4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a70      	ldr	r2, [pc, #448]	; (8002da4 <HAL_DMA_IRQHandler+0x6c8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x516>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_DMA_IRQHandler+0x6cc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10a      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x52c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e009      	b.n	8002c1c <HAL_DMA_IRQHandler+0x540>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03e      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2210      	movs	r2, #16
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d018      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d024      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e01f      	b.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
 8002c6e:	e016      	b.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8110 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_DMA_IRQHandler+0x690>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_IRQHandler+0x694>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d045      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_DMA_IRQHandler+0x698>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d040      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_DMA_IRQHandler+0x69c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d03b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_DMA_IRQHandler+0x6a0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d036      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <HAL_DMA_IRQHandler+0x6a4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d031      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_DMA_IRQHandler+0x6a8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_DMA_IRQHandler+0x6ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d027      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_DMA_IRQHandler+0x6b0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_DMA_IRQHandler+0x6b4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01d      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_DMA_IRQHandler+0x6b8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_DMA_IRQHandler+0x6bc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_DMA_IRQHandler+0x6c0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_DMA_IRQHandler+0x6c4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_DMA_IRQHandler+0x6c8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x678>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_DMA_IRQHandler+0x6cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d12b      	bne.n	8002dac <HAL_DMA_IRQHandler+0x6d0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e02a      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x6e4>
 8002d6a:	bf00      	nop
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8087 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2220      	movs	r2, #32
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d139      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0216 	bic.w	r2, r2, #22
 8002df0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x736>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0208 	bic.w	r2, r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	223f      	movs	r2, #63	; 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 834a 	beq.w	80034e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
          }
          return;
 8002e54:	e344      	b.n	80034e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d018      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02c      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
 8002e82:	e027      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01e      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8306 	beq.w	80034ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8088 	beq.w	8002ffc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_DMA_IRQHandler+0xa08>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_DMA_IRQHandler+0xa0c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a77      	ldr	r2, [pc, #476]	; (80030ec <HAL_DMA_IRQHandler+0xa10>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_DMA_IRQHandler+0xa14>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a74      	ldr	r2, [pc, #464]	; (80030f4 <HAL_DMA_IRQHandler+0xa18>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a73      	ldr	r2, [pc, #460]	; (80030f8 <HAL_DMA_IRQHandler+0xa1c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_DMA_IRQHandler+0xa20>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <HAL_DMA_IRQHandler+0xa24>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_DMA_IRQHandler+0xa28>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <HAL_DMA_IRQHandler+0xa2c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_DMA_IRQHandler+0xa30>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_DMA_IRQHandler+0xa34>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a68      	ldr	r2, [pc, #416]	; (8003114 <HAL_DMA_IRQHandler+0xa38>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a67      	ldr	r2, [pc, #412]	; (8003118 <HAL_DMA_IRQHandler+0xa3c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_DMA_IRQHandler+0xa40>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x8b8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	; (8003120 <HAL_DMA_IRQHandler+0xa44>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x8ca>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_DMA_IRQHandler+0x8da>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d307      	bcc.n	8002fd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f2      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x8da>
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002fd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fea:	e003      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8272 	beq.w	80034ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
 800300e:	e26c      	b.n	80034ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_DMA_IRQHandler+0xa48>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_DMA_IRQHandler+0xa4c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01d      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a40      	ldr	r2, [pc, #256]	; (800312c <HAL_DMA_IRQHandler+0xa50>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d018      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3f      	ldr	r2, [pc, #252]	; (8003130 <HAL_DMA_IRQHandler+0xa54>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3d      	ldr	r2, [pc, #244]	; (8003134 <HAL_DMA_IRQHandler+0xa58>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3c      	ldr	r2, [pc, #240]	; (8003138 <HAL_DMA_IRQHandler+0xa5c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3a      	ldr	r2, [pc, #232]	; (800313c <HAL_DMA_IRQHandler+0xa60>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_DMA_IRQHandler+0x984>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a39      	ldr	r2, [pc, #228]	; (8003140 <HAL_DMA_IRQHandler+0xa64>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_DMA_IRQHandler+0x988>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_DMA_IRQHandler+0x98a>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 823f 	beq.w	80034ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2204      	movs	r2, #4
 800307e:	409a      	lsls	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80cd 	beq.w	8003224 <HAL_DMA_IRQHandler+0xb48>
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80c7 	beq.w	8003224 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2204      	movs	r2, #4
 80030a0:	409a      	lsls	r2, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d049      	beq.n	8003144 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8210 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030cc:	e20a      	b.n	80034e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8206 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030e0:	e200      	b.n	80034e4 <HAL_DMA_IRQHandler+0xe08>
 80030e2:	bf00      	nop
 80030e4:	40020010 	.word	0x40020010
 80030e8:	40020028 	.word	0x40020028
 80030ec:	40020040 	.word	0x40020040
 80030f0:	40020058 	.word	0x40020058
 80030f4:	40020070 	.word	0x40020070
 80030f8:	40020088 	.word	0x40020088
 80030fc:	400200a0 	.word	0x400200a0
 8003100:	400200b8 	.word	0x400200b8
 8003104:	40020410 	.word	0x40020410
 8003108:	40020428 	.word	0x40020428
 800310c:	40020440 	.word	0x40020440
 8003110:	40020458 	.word	0x40020458
 8003114:	40020470 	.word	0x40020470
 8003118:	40020488 	.word	0x40020488
 800311c:	400204a0 	.word	0x400204a0
 8003120:	400204b8 	.word	0x400204b8
 8003124:	58025408 	.word	0x58025408
 8003128:	5802541c 	.word	0x5802541c
 800312c:	58025430 	.word	0x58025430
 8003130:	58025444 	.word	0x58025444
 8003134:	58025458 	.word	0x58025458
 8003138:	5802546c 	.word	0x5802546c
 800313c:	58025480 	.word	0x58025480
 8003140:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d160      	bne.n	8003210 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8c      	ldr	r2, [pc, #560]	; (8003384 <HAL_DMA_IRQHandler+0xca8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a8a      	ldr	r2, [pc, #552]	; (8003388 <HAL_DMA_IRQHandler+0xcac>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a89      	ldr	r2, [pc, #548]	; (800338c <HAL_DMA_IRQHandler+0xcb0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a87      	ldr	r2, [pc, #540]	; (8003390 <HAL_DMA_IRQHandler+0xcb4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a86      	ldr	r2, [pc, #536]	; (8003394 <HAL_DMA_IRQHandler+0xcb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a84      	ldr	r2, [pc, #528]	; (8003398 <HAL_DMA_IRQHandler+0xcbc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a83      	ldr	r2, [pc, #524]	; (800339c <HAL_DMA_IRQHandler+0xcc0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a81      	ldr	r2, [pc, #516]	; (80033a0 <HAL_DMA_IRQHandler+0xcc4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_DMA_IRQHandler+0xcc8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7e      	ldr	r2, [pc, #504]	; (80033a8 <HAL_DMA_IRQHandler+0xccc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7d      	ldr	r2, [pc, #500]	; (80033ac <HAL_DMA_IRQHandler+0xcd0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7b      	ldr	r2, [pc, #492]	; (80033b0 <HAL_DMA_IRQHandler+0xcd4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_DMA_IRQHandler+0xcd8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a78      	ldr	r2, [pc, #480]	; (80033b8 <HAL_DMA_IRQHandler+0xcdc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a77      	ldr	r2, [pc, #476]	; (80033bc <HAL_DMA_IRQHandler+0xce0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0xb12>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <HAL_DMA_IRQHandler+0xce4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <HAL_DMA_IRQHandler+0xb24>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e007      	b.n	8003210 <HAL_DMA_IRQHandler+0xb34>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0204 	bic.w	r2, r2, #4
 800320e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8165 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003222:	e15f      	b.n	80034e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2202      	movs	r2, #2
 800322e:	409a      	lsls	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80c5 	beq.w	80033c4 <HAL_DMA_IRQHandler+0xce8>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80bf 	beq.w	80033c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2202      	movs	r2, #2
 8003250:	409a      	lsls	r2, r3
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 813a 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800327c:	e134      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8130 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003290:	e12a      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d168      	bne.n	800336e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_DMA_IRQHandler+0xca8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_DMA_IRQHandler+0xcac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <HAL_DMA_IRQHandler+0xcb0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_DMA_IRQHandler+0xcb4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a32      	ldr	r2, [pc, #200]	; (8003394 <HAL_DMA_IRQHandler+0xcb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a31      	ldr	r2, [pc, #196]	; (8003398 <HAL_DMA_IRQHandler+0xcbc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <HAL_DMA_IRQHandler+0xcc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <HAL_DMA_IRQHandler+0xcc4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <HAL_DMA_IRQHandler+0xcc8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_DMA_IRQHandler+0xccc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <HAL_DMA_IRQHandler+0xcd0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <HAL_DMA_IRQHandler+0xcd4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <HAL_DMA_IRQHandler+0xcd8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <HAL_DMA_IRQHandler+0xcdc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_DMA_IRQHandler+0xce0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_IRQHandler+0xc60>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_DMA_IRQHandler+0xce4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_IRQHandler+0xc72>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0214 	bic.w	r2, r2, #20
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <HAL_DMA_IRQHandler+0xc82>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 020a 	bic.w	r2, r2, #10
 800335c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80b8 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003380:	e0b2      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe0c>
 8003382:	bf00      	nop
 8003384:	40020010 	.word	0x40020010
 8003388:	40020028 	.word	0x40020028
 800338c:	40020040 	.word	0x40020040
 8003390:	40020058 	.word	0x40020058
 8003394:	40020070 	.word	0x40020070
 8003398:	40020088 	.word	0x40020088
 800339c:	400200a0 	.word	0x400200a0
 80033a0:	400200b8 	.word	0x400200b8
 80033a4:	40020410 	.word	0x40020410
 80033a8:	40020428 	.word	0x40020428
 80033ac:	40020440 	.word	0x40020440
 80033b0:	40020458 	.word	0x40020458
 80033b4:	40020470 	.word	0x40020470
 80033b8:	40020488 	.word	0x40020488
 80033bc:	400204a0 	.word	0x400204a0
 80033c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2208      	movs	r2, #8
 80033ce:	409a      	lsls	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8088 	beq.w	80034ea <HAL_DMA_IRQHandler+0xe0e>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8082 	beq.w	80034ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <HAL_DMA_IRQHandler+0xe14>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3f      	ldr	r2, [pc, #252]	; (80034f4 <HAL_DMA_IRQHandler+0xe18>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <HAL_DMA_IRQHandler+0xe1c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_DMA_IRQHandler+0xe20>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_DMA_IRQHandler+0xe24>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a39      	ldr	r2, [pc, #228]	; (8003504 <HAL_DMA_IRQHandler+0xe28>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_DMA_IRQHandler+0xe2c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a36      	ldr	r2, [pc, #216]	; (800350c <HAL_DMA_IRQHandler+0xe30>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a35      	ldr	r2, [pc, #212]	; (8003510 <HAL_DMA_IRQHandler+0xe34>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_DMA_IRQHandler+0xe38>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_DMA_IRQHandler+0xe3c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a30      	ldr	r2, [pc, #192]	; (800351c <HAL_DMA_IRQHandler+0xe40>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <HAL_DMA_IRQHandler+0xe44>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <HAL_DMA_IRQHandler+0xe48>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <HAL_DMA_IRQHandler+0xe4c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_IRQHandler+0xdaa>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <HAL_DMA_IRQHandler+0xe50>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0xdbc>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 021c 	bic.w	r2, r2, #28
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_DMA_IRQHandler+0xdcc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 020e 	bic.w	r2, r2, #14
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e004      	b.n	80034ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034e0:	bf00      	nop
 80034e2:	e002      	b.n	80034ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8

08003530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <DMA_CalcBaseAndBitshift+0x118>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a41      	ldr	r2, [pc, #260]	; (800364c <DMA_CalcBaseAndBitshift+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <DMA_CalcBaseAndBitshift+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3e      	ldr	r2, [pc, #248]	; (8003654 <DMA_CalcBaseAndBitshift+0x124>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a3c      	ldr	r2, [pc, #240]	; (8003658 <DMA_CalcBaseAndBitshift+0x128>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3b      	ldr	r2, [pc, #236]	; (800365c <DMA_CalcBaseAndBitshift+0x12c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a39      	ldr	r2, [pc, #228]	; (8003660 <DMA_CalcBaseAndBitshift+0x130>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a38      	ldr	r2, [pc, #224]	; (8003664 <DMA_CalcBaseAndBitshift+0x134>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a36      	ldr	r2, [pc, #216]	; (8003668 <DMA_CalcBaseAndBitshift+0x138>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a35      	ldr	r2, [pc, #212]	; (800366c <DMA_CalcBaseAndBitshift+0x13c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a33      	ldr	r2, [pc, #204]	; (8003670 <DMA_CalcBaseAndBitshift+0x140>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a32      	ldr	r2, [pc, #200]	; (8003674 <DMA_CalcBaseAndBitshift+0x144>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a30      	ldr	r2, [pc, #192]	; (8003678 <DMA_CalcBaseAndBitshift+0x148>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2f      	ldr	r2, [pc, #188]	; (800367c <DMA_CalcBaseAndBitshift+0x14c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <DMA_CalcBaseAndBitshift+0x150>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <DMA_CalcBaseAndBitshift+0xa8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <DMA_CalcBaseAndBitshift+0x154>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <DMA_CalcBaseAndBitshift+0xac>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <DMA_CalcBaseAndBitshift+0xae>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b10      	subs	r3, #16
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <DMA_CalcBaseAndBitshift+0x158>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <DMA_CalcBaseAndBitshift+0x15c>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d908      	bls.n	800361c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <DMA_CalcBaseAndBitshift+0x160>)
 8003612:	4013      	ands	r3, r2
 8003614:	1d1a      	adds	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	; 0x58
 800361a:	e00d      	b.n	8003638 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <DMA_CalcBaseAndBitshift+0x160>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6593      	str	r3, [r2, #88]	; 0x58
 800362a:	e005      	b.n	8003638 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
 8003688:	aaaaaaab 	.word	0xaaaaaaab
 800368c:	08009d2c 	.word	0x08009d2c
 8003690:	fffffc00 	.word	0xfffffc00

08003694 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d120      	bne.n	80036ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d858      	bhi.n	8003762 <DMA_CheckFifoParam+0xce>
 80036b0:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <DMA_CheckFifoParam+0x24>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036db 	.word	0x080036db
 80036c0:	080036c9 	.word	0x080036c9
 80036c4:	08003763 	.word	0x08003763
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d048      	beq.n	8003766 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036d8:	e045      	b.n	8003766 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e2:	d142      	bne.n	800376a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036e8:	e03f      	b.n	800376a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	d123      	bne.n	800373c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d838      	bhi.n	800376e <DMA_CheckFifoParam+0xda>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <DMA_CheckFifoParam+0x70>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	0800371b 	.word	0x0800371b
 800370c:	08003715 	.word	0x08003715
 8003710:	0800372d 	.word	0x0800372d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
        break;
 8003718:	e030      	b.n	800377c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800372a:	e022      	b.n	8003772 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003734:	d11f      	bne.n	8003776 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800373a:	e01c      	b.n	8003776 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	2b02      	cmp	r3, #2
 8003742:	d902      	bls.n	800374a <DMA_CheckFifoParam+0xb6>
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003748:	e018      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
        break;
 800374e:	e015      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
    break;
 8003760:	e00b      	b.n	800377a <DMA_CheckFifoParam+0xe6>
        break;
 8003762:	bf00      	nop
 8003764:	e00a      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        break;
 8003766:	bf00      	nop
 8003768:	e008      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        break;
 800376a:	bf00      	nop
 800376c:	e006      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <DMA_CheckFifoParam+0xe8>
        break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <DMA_CheckFifoParam+0xe8>
    break;
 800377a:	bf00      	nop
    }
  }

  return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a38      	ldr	r2, [pc, #224]	; (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a36      	ldr	r2, [pc, #216]	; (8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a35      	ldr	r2, [pc, #212]	; (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a33      	ldr	r2, [pc, #204]	; (800388c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a32      	ldr	r2, [pc, #200]	; (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a30      	ldr	r2, [pc, #192]	; (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2d      	ldr	r2, [pc, #180]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01a      	beq.n	800382a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3b08      	subs	r3, #8
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2201      	movs	r2, #1
 8003822:	409a      	lsls	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003828:	e024      	b.n	8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	3b10      	subs	r3, #16
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d806      	bhi.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d902      	bls.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3308      	adds	r3, #8
 8003850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	58025408 	.word	0x58025408
 8003884:	5802541c 	.word	0x5802541c
 8003888:	58025430 	.word	0x58025430
 800388c:	58025444 	.word	0x58025444
 8003890:	58025458 	.word	0x58025458
 8003894:	5802546c 	.word	0x5802546c
 8003898:	58025480 	.word	0x58025480
 800389c:	58025494 	.word	0x58025494
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	16009600 	.word	0x16009600
 80038a8:	58025880 	.word	0x58025880
 80038ac:	aaaaaaab 	.word	0xaaaaaaab
 80038b0:	400204b8 	.word	0x400204b8
 80038b4:	4002040f 	.word	0x4002040f
 80038b8:	10008200 	.word	0x10008200
 80038bc:	40020880 	.word	0x40020880

080038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04a      	beq.n	800396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d847      	bhi.n	800396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d022      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a24      	ldr	r2, [pc, #144]	; (800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d01d      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a22      	ldr	r2, [pc, #136]	; (8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d018      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a21      	ldr	r2, [pc, #132]	; (8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00e      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1e      	ldr	r2, [pc, #120]	; (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003948:	671a      	str	r2, [r3, #112]	; 0x70
 800394a:	e009      	b.n	8003960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800395e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	2201      	movs	r2, #1
 8003966:	409a      	lsls	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	58025408 	.word	0x58025408
 800397c:	5802541c 	.word	0x5802541c
 8003980:	58025430 	.word	0x58025430
 8003984:	58025444 	.word	0x58025444
 8003988:	58025458 	.word	0x58025458
 800398c:	5802546c 	.word	0x5802546c
 8003990:	58025480 	.word	0x58025480
 8003994:	58025494 	.word	0x58025494
 8003998:	1600963f 	.word	0x1600963f
 800399c:	58025940 	.word	0x58025940
 80039a0:	1000823f 	.word	0x1000823f
 80039a4:	40020940 	.word	0x40020940

080039a8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d022      	beq.n	8003a44 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01a      	beq.n	8003a44 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
      }
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a5a:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <HAL_GPIO_Init+0x234>)
 8003a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a5e:	e194      	b.n	8003d8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8186 	beq.w	8003d84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d005      	beq.n	8003a90 <HAL_GPIO_Init+0x44>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d130      	bne.n	8003af2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0201 	and.w	r2, r3, #1
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d017      	beq.n	8003b2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d123      	bne.n	8003b82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80e0 	beq.w	8003d84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc4:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bca:	4a2e      	ldr	r2, [pc, #184]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be2:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <HAL_GPIO_Init+0x23c>)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_GPIO_Init+0x240>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d052      	beq.n	8003cb4 <HAL_GPIO_Init+0x268>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_GPIO_Init+0x244>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_GPIO_Init+0x22e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_GPIO_Init+0x248>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02b      	beq.n	8003c76 <HAL_GPIO_Init+0x22a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_GPIO_Init+0x24c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d025      	beq.n	8003c72 <HAL_GPIO_Init+0x226>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_GPIO_Init+0x250>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01f      	beq.n	8003c6e <HAL_GPIO_Init+0x222>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_GPIO_Init+0x254>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d019      	beq.n	8003c6a <HAL_GPIO_Init+0x21e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_GPIO_Init+0x258>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_GPIO_Init+0x21a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_GPIO_Init+0x25c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00d      	beq.n	8003c62 <HAL_GPIO_Init+0x216>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_GPIO_Init+0x260>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <HAL_GPIO_Init+0x212>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <HAL_GPIO_Init+0x264>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_GPIO_Init+0x20e>
 8003c56:	2309      	movs	r3, #9
 8003c58:	e02d      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	e02b      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c5e:	2308      	movs	r3, #8
 8003c60:	e029      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c62:	2307      	movs	r3, #7
 8003c64:	e027      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c66:	2306      	movs	r3, #6
 8003c68:	e025      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c6a:	2305      	movs	r3, #5
 8003c6c:	e023      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c6e:	2304      	movs	r3, #4
 8003c70:	e021      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e01f      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e01d      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e01b      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c7e:	bf00      	nop
 8003c80:	58000080 	.word	0x58000080
 8003c84:	58024400 	.word	0x58024400
 8003c88:	58000400 	.word	0x58000400
 8003c8c:	58020000 	.word	0x58020000
 8003c90:	58020400 	.word	0x58020400
 8003c94:	58020800 	.word	0x58020800
 8003c98:	58020c00 	.word	0x58020c00
 8003c9c:	58021000 	.word	0x58021000
 8003ca0:	58021400 	.word	0x58021400
 8003ca4:	58021800 	.word	0x58021800
 8003ca8:	58021c00 	.word	0x58021c00
 8003cac:	58022000 	.word	0x58022000
 8003cb0:	58022400 	.word	0x58022400
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	f002 0203 	and.w	r2, r2, #3
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	4093      	lsls	r3, r2
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc6:	4938      	ldr	r1, [pc, #224]	; (8003da8 <HAL_GPIO_Init+0x35c>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f ae63 	bne.w	8003a60 <HAL_GPIO_Init+0x14>
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	3724      	adds	r7, #36	; 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	58000400 	.word	0x58000400

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_PWREx_ConfigSupply+0x70>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d00a      	beq.n	8003e0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_PWREx_ConfigSupply+0x70>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01f      	b.n	8003e46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e01d      	b.n	8003e46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_PWREx_ConfigSupply+0x70>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 0207 	bic.w	r2, r3, #7
 8003e12:	490f      	ldr	r1, [pc, #60]	; (8003e50 <HAL_PWREx_ConfigSupply+0x70>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e1a:	f7fd f9db 	bl	80011d4 <HAL_GetTick>
 8003e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e20:	e009      	b.n	8003e36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e22:	f7fd f9d7 	bl	80011d4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e30:	d901      	bls.n	8003e36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e007      	b.n	8003e46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_PWREx_ConfigSupply+0x70>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d1ee      	bne.n	8003e22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	58024800 	.word	0x58024800

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f000 bc1c 	b.w	80046a0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8087 	beq.w	8003f84 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e76:	4b9e      	ldr	r3, [pc, #632]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e80:	4b9b      	ldr	r3, [pc, #620]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d007      	beq.n	8003e9c <HAL_RCC_OscConfig+0x48>
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2b18      	cmp	r3, #24
 8003e90:	d110      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x60>
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d06c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x12e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d168      	bne.n	8003f82 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e3f5      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x78>
 8003ebe:	4b8c      	ldr	r3, [pc, #560]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a8b      	ldr	r2, [pc, #556]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e02e      	b.n	8003f2a <HAL_RCC_OscConfig+0xd6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x9a>
 8003ed4:	4b86      	ldr	r3, [pc, #536]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b83      	ldr	r3, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a82      	ldr	r2, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e01d      	b.n	8003f2a <HAL_RCC_OscConfig+0xd6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_OscConfig+0xbe>
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7c      	ldr	r2, [pc, #496]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e00b      	b.n	8003f2a <HAL_RCC_OscConfig+0xd6>
 8003f12:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b74      	ldr	r3, [pc, #464]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fd f94f 	bl	80011d4 <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f3a:	f7fd f94b 	bl	80011d4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	; 0x64
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e3a9      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0xe6>
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd f93b 	bl	80011d4 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f62:	f7fd f937 	bl	80011d4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e395      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x10e>
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80ca 	beq.w	8004126 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f92:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9c:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x164>
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b18      	cmp	r3, #24
 8003fac:	d156      	bne.n	800405c <HAL_RCC_OscConfig+0x208>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d151      	bne.n	800405c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x17c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e367      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 0219 	bic.w	r2, r3, #25
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4944      	ldr	r1, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe2:	f7fd f8f7 	bl	80011d4 <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd f8f3 	bl	80011d4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e351      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	f7fd f914 	bl	8001234 <HAL_GetREVID>
 800400c:	4603      	mov	r3, r0
 800400e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004012:	4293      	cmp	r3, r2
 8004014:	d817      	bhi.n	8004046 <HAL_RCC_OscConfig+0x1f2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d108      	bne.n	8004030 <HAL_RCC_OscConfig+0x1dc>
 800401e:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004026:	4a32      	ldr	r2, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402e:	e07a      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	492c      	ldr	r1, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	e06f      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	4926      	ldr	r1, [pc, #152]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405a:	e064      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d047      	beq.n	80040f4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 0219 	bic.w	r2, r3, #25
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	491f      	ldr	r1, [pc, #124]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd f8ad 	bl	80011d4 <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407e:	f7fd f8a9 	bl	80011d4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e307      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	f7fd f8ca 	bl	8001234 <HAL_GetREVID>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d817      	bhi.n	80040da <HAL_RCC_OscConfig+0x286>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d108      	bne.n	80040c4 <HAL_RCC_OscConfig+0x270>
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040ba:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	6053      	str	r3, [r2, #4]
 80040c2:	e030      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	4907      	ldr	r1, [pc, #28]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	e025      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	4901      	ldr	r1, [pc, #4]	; (80040f0 <HAL_RCC_OscConfig+0x29c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
 80040ee:	e01a      	b.n	8004126 <HAL_RCC_OscConfig+0x2d2>
 80040f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f4:	4b9e      	ldr	r3, [pc, #632]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a9d      	ldr	r2, [pc, #628]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd f868 	bl	80011d4 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004108:	f7fd f864 	bl	80011d4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e2c2      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800411a:	4b95      	ldr	r3, [pc, #596]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a9 	beq.w	8004286 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004134:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800413e:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d007      	beq.n	800415a <HAL_RCC_OscConfig+0x306>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b18      	cmp	r3, #24
 800414e:	d13a      	bne.n	80041c6 <HAL_RCC_OscConfig+0x372>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d135      	bne.n	80041c6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800415a:	4b85      	ldr	r3, [pc, #532]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x31e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b80      	cmp	r3, #128	; 0x80
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e296      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004172:	f7fd f85f 	bl	8001234 <HAL_GetREVID>
 8004176:	4603      	mov	r3, r0
 8004178:	f241 0203 	movw	r2, #4099	; 0x1003
 800417c:	4293      	cmp	r3, r2
 800417e:	d817      	bhi.n	80041b0 <HAL_RCC_OscConfig+0x35c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	2b20      	cmp	r3, #32
 8004186:	d108      	bne.n	800419a <HAL_RCC_OscConfig+0x346>
 8004188:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004190:	4a77      	ldr	r2, [pc, #476]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004196:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004198:	e075      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800419a:	4b75      	ldr	r3, [pc, #468]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	4971      	ldr	r1, [pc, #452]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ae:	e06a      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	496c      	ldr	r1, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041c4:	e05f      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d042      	beq.n	8004254 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041ce:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a67      	ldr	r2, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fc fffb 	bl	80011d4 <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041e2:	f7fc fff7 	bl	80011d4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e255      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004200:	f7fd f818 	bl	8001234 <HAL_GetREVID>
 8004204:	4603      	mov	r3, r0
 8004206:	f241 0203 	movw	r2, #4099	; 0x1003
 800420a:	4293      	cmp	r3, r2
 800420c:	d817      	bhi.n	800423e <HAL_RCC_OscConfig+0x3ea>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	2b20      	cmp	r3, #32
 8004214:	d108      	bne.n	8004228 <HAL_RCC_OscConfig+0x3d4>
 8004216:	4b56      	ldr	r3, [pc, #344]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800421e:	4a54      	ldr	r2, [pc, #336]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004224:	6053      	str	r3, [r2, #4]
 8004226:	e02e      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
 8004228:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	069b      	lsls	r3, r3, #26
 8004236:	494e      	ldr	r1, [pc, #312]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	e023      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	4948      	ldr	r1, [pc, #288]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	60cb      	str	r3, [r1, #12]
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004254:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a45      	ldr	r2, [pc, #276]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800425a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fc ffb8 	bl	80011d4 <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004268:	f7fc ffb4 	bl	80011d4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e212      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d036      	beq.n	8004300 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d019      	beq.n	80042ce <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429a:	4b35      	ldr	r3, [pc, #212]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fc ff95 	bl	80011d4 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fc ff91 	bl	80011d4 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1ef      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x45a>
 80042cc:	e018      	b.n	8004300 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	4a27      	ldr	r2, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fc ff7b 	bl	80011d4 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fc ff77 	bl	80011d4 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1d5      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d039      	beq.n	8004380 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800431a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800431e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004320:	f7fc ff58 	bl	80011d4 <HAL_GetTick>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004328:	f7fc ff54 	bl	80011d4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1b2      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x4d4>
 8004346:	e01b      	b.n	8004380 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_RCC_OscConfig+0x51c>)
 800434e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004352:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004354:	f7fc ff3e 	bl	80011d4 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800435c:	f7fc ff3a 	bl	80011d4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d904      	bls.n	8004374 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e198      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004374:	4ba3      	ldr	r3, [pc, #652]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ed      	bne.n	800435c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8081 	beq.w	8004490 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800438e:	4b9e      	ldr	r3, [pc, #632]	; (8004608 <HAL_RCC_OscConfig+0x7b4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a9d      	ldr	r2, [pc, #628]	; (8004608 <HAL_RCC_OscConfig+0x7b4>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800439a:	f7fc ff1b 	bl	80011d4 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fc ff17 	bl	80011d4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e175      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043b4:	4b94      	ldr	r3, [pc, #592]	; (8004608 <HAL_RCC_OscConfig+0x7b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x582>
 80043c8:	4b8e      	ldr	r3, [pc, #568]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a8d      	ldr	r2, [pc, #564]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e02d      	b.n	8004432 <HAL_RCC_OscConfig+0x5de>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5a4>
 80043de:	4b89      	ldr	r3, [pc, #548]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a88      	ldr	r2, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b86      	ldr	r3, [pc, #536]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a85      	ldr	r2, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	e01c      	b.n	8004432 <HAL_RCC_OscConfig+0x5de>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0x5c6>
 8004400:	4b80      	ldr	r3, [pc, #512]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a7f      	ldr	r2, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
 800440c:	4b7d      	ldr	r3, [pc, #500]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a7c      	ldr	r2, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
 8004418:	e00b      	b.n	8004432 <HAL_RCC_OscConfig+0x5de>
 800441a:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a79      	ldr	r2, [pc, #484]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
 8004426:	4b77      	ldr	r3, [pc, #476]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a76      	ldr	r2, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fc fecb 	bl	80011d4 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fc fec7 	bl	80011d4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e123      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ee      	beq.n	8004442 <HAL_RCC_OscConfig+0x5ee>
 8004464:	e014      	b.n	8004490 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fc feb5 	bl	80011d4 <HAL_GetTick>
 800446a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fc feb1 	bl	80011d4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e10d      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004484:	4b5f      	ldr	r3, [pc, #380]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8102 	beq.w	800469e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800449a:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	f000 80bd 	beq.w	8004622 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	f040 8095 	bne.w	80045dc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b54      	ldr	r3, [pc, #336]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a53      	ldr	r2, [pc, #332]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80044b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fc fe89 	bl	80011d4 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fc fe85 	bl	80011d4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0e3      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044d8:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e4:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80044e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e8:	4b48      	ldr	r3, [pc, #288]	; (800460c <HAL_RCC_OscConfig+0x7b8>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4942      	ldr	r1, [pc, #264]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	628b      	str	r3, [r1, #40]	; 0x28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	3b01      	subs	r3, #1
 8004504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	3b01      	subs	r3, #1
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	b29b      	uxth	r3, r3
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	3b01      	subs	r3, #1
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	3b01      	subs	r3, #1
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800452e:	4935      	ldr	r1, [pc, #212]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	4a32      	ldr	r2, [pc, #200]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004544:	4b32      	ldr	r3, [pc, #200]	; (8004610 <HAL_RCC_OscConfig+0x7bc>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	492d      	ldr	r1, [pc, #180]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	f023 020c 	bic.w	r2, r3, #12
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4928      	ldr	r1, [pc, #160]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f023 0202 	bic.w	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4924      	ldr	r1, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a21      	ldr	r2, [pc, #132]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 8004596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fc fe0e 	bl	80011d4 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc fe0a 	bl	80011d4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e068      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x768>
 80045da:	e060      	b.n	800469e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fc fdf4 	bl	80011d4 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ee:	e011      	b.n	8004614 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fc fdf0 	bl	80011d4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d90a      	bls.n	8004614 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04e      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	58024800 	.word	0x58024800
 800460c:	fffffc0c 	.word	0xfffffc0c
 8004610:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCC_OscConfig+0x854>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e7      	bne.n	80045f0 <HAL_RCC_OscConfig+0x79c>
 8004620:	e03d      	b.n	800469e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004622:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCC_OscConfig+0x854>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_RCC_OscConfig+0x854>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b01      	cmp	r3, #1
 8004634:	d031      	beq.n	800469a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0203 	and.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d12a      	bne.n	800469a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d122      	bne.n	800469a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d11a      	bne.n	800469a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	0a5b      	lsrs	r3, r3, #9
 8004668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d111      	bne.n	800469a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d108      	bne.n	800469a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	58024400 	.word	0x58024400

080046ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e19c      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d910      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b87      	ldr	r3, [pc, #540]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 020f 	bic.w	r2, r3, #15
 80046d6:	4985      	ldr	r1, [pc, #532]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b83      	ldr	r3, [pc, #524]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e184      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004708:	429a      	cmp	r2, r3
 800470a:	d908      	bls.n	800471e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800470c:	4b78      	ldr	r3, [pc, #480]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4975      	ldr	r1, [pc, #468]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800471a:	4313      	orrs	r3, r2
 800471c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d010      	beq.n	800474c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004736:	429a      	cmp	r2, r3
 8004738:	d908      	bls.n	800474c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	496a      	ldr	r1, [pc, #424]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004764:	429a      	cmp	r2, r3
 8004766:	d908      	bls.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004768:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	495e      	ldr	r1, [pc, #376]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004776:	4313      	orrs	r3, r2
 8004778:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004792:	429a      	cmp	r2, r3
 8004794:	d908      	bls.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4953      	ldr	r1, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d908      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f023 020f 	bic.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4947      	ldr	r1, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d055      	beq.n	800488e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047e2:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4940      	ldr	r1, [pc, #256]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d107      	bne.n	800480c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fc:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d121      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0f6      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004814:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d115      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0ea      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0de      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0d6      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f023 0207 	bic.w	r2, r3, #7
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4925      	ldr	r1, [pc, #148]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fc fcb9 	bl	80011d4 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004864:	e00a      	b.n	800487c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004866:	f7fc fcb5 	bl	80011d4 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0be      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	429a      	cmp	r2, r3
 800488c:	d1eb      	bne.n	8004866 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d208      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d214      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 020f 	bic.w	r2, r3, #15
 80048d2:	4906      	ldr	r1, [pc, #24]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e086      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
 80048ec:	52002000 	.word	0x52002000
 80048f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800490c:	429a      	cmp	r2, r3
 800490e:	d208      	bcs.n	8004922 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004910:	4b3c      	ldr	r3, [pc, #240]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4939      	ldr	r1, [pc, #228]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	4b34      	ldr	r3, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800493a:	429a      	cmp	r2, r3
 800493c:	d208      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	492e      	ldr	r1, [pc, #184]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800494c:	4313      	orrs	r3, r2
 800494e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d010      	beq.n	800497e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004968:	429a      	cmp	r2, r3
 800496a:	d208      	bcs.n	800497e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4922      	ldr	r1, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004996:	429a      	cmp	r2, r3
 8004998:	d208      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4917      	ldr	r1, [pc, #92]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049ac:	f000 f834 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x35c>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x35c>)
 80049d4:	5cd3      	ldrb	r3, [r2, r3]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x360>)
 80049e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x364>)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x368>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fba6 	bl	8001140 <HAL_InitTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	08009d1c 	.word	0x08009d1c
 8004a0c:	24000004 	.word	0x24000004
 8004a10:	24000000 	.word	0x24000000
 8004a14:	24000008 	.word	0x24000008

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a1e:	4bb3      	ldr	r3, [pc, #716]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a26:	2b18      	cmp	r3, #24
 8004a28:	f200 8155 	bhi.w	8004cd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004cd7 	.word	0x08004cd7
 8004a3c:	08004cd7 	.word	0x08004cd7
 8004a40:	08004cd7 	.word	0x08004cd7
 8004a44:	08004cd7 	.word	0x08004cd7
 8004a48:	08004cd7 	.word	0x08004cd7
 8004a4c:	08004cd7 	.word	0x08004cd7
 8004a50:	08004cd7 	.word	0x08004cd7
 8004a54:	08004abf 	.word	0x08004abf
 8004a58:	08004cd7 	.word	0x08004cd7
 8004a5c:	08004cd7 	.word	0x08004cd7
 8004a60:	08004cd7 	.word	0x08004cd7
 8004a64:	08004cd7 	.word	0x08004cd7
 8004a68:	08004cd7 	.word	0x08004cd7
 8004a6c:	08004cd7 	.word	0x08004cd7
 8004a70:	08004cd7 	.word	0x08004cd7
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004cd7 	.word	0x08004cd7
 8004a7c:	08004cd7 	.word	0x08004cd7
 8004a80:	08004cd7 	.word	0x08004cd7
 8004a84:	08004cd7 	.word	0x08004cd7
 8004a88:	08004cd7 	.word	0x08004cd7
 8004a8c:	08004cd7 	.word	0x08004cd7
 8004a90:	08004cd7 	.word	0x08004cd7
 8004a94:	08004acb 	.word	0x08004acb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a98:	4b94      	ldr	r3, [pc, #592]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa4:	4b91      	ldr	r3, [pc, #580]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	08db      	lsrs	r3, r3, #3
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	4a90      	ldr	r2, [pc, #576]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ab6:	e111      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ab8:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004aba:	61bb      	str	r3, [r7, #24]
    break;
 8004abc:	e10e      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004abe:	4b8d      	ldr	r3, [pc, #564]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ac0:	61bb      	str	r3, [r7, #24]
    break;
 8004ac2:	e10b      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ac4:	4b8c      	ldr	r3, [pc, #560]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ac6:	61bb      	str	r3, [r7, #24]
    break;
 8004ac8:	e108      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aca:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ad4:	4b85      	ldr	r3, [pc, #532]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ade:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ae0:	4b82      	ldr	r3, [pc, #520]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004aea:	4b80      	ldr	r3, [pc, #512]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	08db      	lsrs	r3, r3, #3
 8004af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80e1 	beq.w	8004cd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	f000 8083 	beq.w	8004c1c <HAL_RCC_GetSysClockFreq+0x204>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	f200 80a1 	bhi.w	8004c60 <HAL_RCC_GetSysClockFreq+0x248>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x114>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d056      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b2a:	e099      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b2c:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02d      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b38:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	4a6b      	ldr	r2, [pc, #428]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b92:	e087      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004d00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b51      	ldr	r3, [pc, #324]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd6:	e065      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1a:	e043      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004d08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5e:	e021      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004d04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cae:	3301      	adds	r3, #1
 8004cb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 3a90 	vmov	r3, s15
 8004ccc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004cce:	e005      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61bb      	str	r3, [r7, #24]
    break;
 8004cd4:	e002      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cd8:	61bb      	str	r3, [r7, #24]
    break;
 8004cda:	bf00      	nop
  }

  return sysclockfreq;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	03d09000 	.word	0x03d09000
 8004cf4:	003d0900 	.word	0x003d0900
 8004cf8:	017d7840 	.word	0x017d7840
 8004cfc:	46000000 	.word	0x46000000
 8004d00:	4c742400 	.word	0x4c742400
 8004d04:	4a742400 	.word	0x4a742400
 8004d08:	4bbebc20 	.word	0x4bbebc20

08004d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d12:	f7ff fe81 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490f      	ldr	r1, [pc, #60]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d4a:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	08009d1c 	.word	0x08009d1c
 8004d64:	24000004 	.word	0x24000004
 8004d68:	24000000 	.word	0x24000000

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d70:	f7ff ffcc 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4904      	ldr	r1, [pc, #16]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d82:	5ccb      	ldrb	r3, [r1, r3]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	58024400 	.word	0x58024400
 8004d94:	08009d1c 	.word	0x08009d1c

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d9c:	f7ff ffb6 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	08009d1c 	.word	0x08009d1c

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dcc:	2300      	movs	r3, #0
 8004dce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03f      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004de8:	d02a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004dea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dee:	d824      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df4:	d018      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfa:	d81e      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	d007      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e06:	e018      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e08:	4bab      	ldr	r3, [pc, #684]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	4aaa      	ldr	r2, [pc, #680]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e14:	e015      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f9cf 	bl	80061c0 <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e26:	e00c      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fa78 	bl	8006324 <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e38:	e003      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e48:	4b9b      	ldr	r3, [pc, #620]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	4998      	ldr	r1, [pc, #608]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	650b      	str	r3, [r1, #80]	; 0x50
 8004e5a:	e001      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03d      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d826      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004e91 	.word	0x08004e91
 8004e80:	08004e9f 	.word	0x08004e9f
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004ec9 	.word	0x08004ec9
 8004e8c:	08004ec9 	.word	0x08004ec9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e90:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4a88      	ldr	r2, [pc, #544]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e015      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 f98b 	bl	80061c0 <RCCEx_PLL2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eae:	e00c      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3324      	adds	r3, #36	; 0x24
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fa34 	bl	8006324 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed0:	4b79      	ldr	r3, [pc, #484]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	f023 0207 	bic.w	r2, r3, #7
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	4976      	ldr	r1, [pc, #472]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ee2:	e001      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d042      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d02b      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f02:	d825      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f04:	2bc0      	cmp	r3, #192	; 0xc0
 8004f06:	d028      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f08:	2bc0      	cmp	r3, #192	; 0xc0
 8004f0a:	d821      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d016      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d81d      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f1c:	e018      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1e:	4b66      	ldr	r3, [pc, #408]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	4a65      	ldr	r2, [pc, #404]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f2a:	e017      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f944 	bl	80061c0 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 f9ed 	bl	8006324 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f4e:	e005      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
      break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f62:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	4952      	ldr	r1, [pc, #328]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	650b      	str	r3, [r1, #80]	; 0x50
 8004f74:	e001      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d049      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f90:	d030      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f96:	d82a      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f9c:	d02c      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fa2:	d824      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa8:	d018      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d81e      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004fb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb8:	d007      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004fba:	e018      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fc8:	e017      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 f8f5 	bl	80061c0 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fda:	e00e      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 f99e 	bl	8006324 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fec:	e005      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005000:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800500e:	492a      	ldr	r1, [pc, #168]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005010:	4313      	orrs	r3, r2
 8005012:	658b      	str	r3, [r1, #88]	; 0x58
 8005014:	e001      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005022:	2b00      	cmp	r3, #0
 8005024:	d04c      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800502c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005030:	d030      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005036:	d82a      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800503c:	d02c      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800503e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005042:	d824      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005048:	d018      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800504a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800504e:	d81e      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005058:	d007      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800505a:	e018      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005068:	e017      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f001 f8a5 	bl	80061c0 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800507a:	e00e      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f94e 	bl	8006324 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
      break;
 8005092:	e002      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005094:	bf00      	nop
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10d      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050ae:	4902      	ldr	r1, [pc, #8]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	658b      	str	r3, [r1, #88]	; 0x58
 80050b4:	e004      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d032      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	2b30      	cmp	r3, #48	; 0x30
 80050d2:	d01c      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050d4:	2b30      	cmp	r3, #48	; 0x30
 80050d6:	d817      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d00c      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d813      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d016      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d10f      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	4baf      	ldr	r3, [pc, #700]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4aae      	ldr	r2, [pc, #696]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050f4:	e00e      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 f85f 	bl	80061c0 <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
      break;
 800510c:	e002      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800511a:	4ba3      	ldr	r3, [pc, #652]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	49a0      	ldr	r1, [pc, #640]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800512c:	e001      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d047      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005146:	d030      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800514c:	d82a      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800514e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005152:	d02c      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005158:	d824      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	d018      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005164:	d81e      	bhi.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d007      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005170:	e018      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005172:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a8c      	ldr	r2, [pc, #560]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800517e:	e017      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 f81a 	bl	80061c0 <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005190:	e00e      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3324      	adds	r3, #36	; 0x24
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f001 f8c3 	bl	8006324 <RCCEx_PLL3_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051a2:	e005      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051b6:	4b7c      	ldr	r3, [pc, #496]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	4979      	ldr	r1, [pc, #484]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	650b      	str	r3, [r1, #80]	; 0x50
 80051c8:	e001      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d049      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e2:	d02e      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80051e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e8:	d828      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ee:	d02a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80051f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051f4:	d822      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051fa:	d026      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80051fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005200:	d81c      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005206:	d010      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800520c:	d816      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01d      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d111      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f000 ffce 	bl	80061c0 <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005228:	e012      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3324      	adds	r3, #36	; 0x24
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f001 f877 	bl	8006324 <RCCEx_PLL3_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800523a:	e009      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
      break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800524e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005256:	4b54      	ldr	r3, [pc, #336]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	4951      	ldr	r1, [pc, #324]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	650b      	str	r3, [r1, #80]	; 0x50
 8005268:	e001      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04b      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005284:	d02e      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800528a:	d828      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d02a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d822      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800529c:	d026      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800529e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052a2:	d81c      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a8:	d010      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d816      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01d      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b8:	d111      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff7d 	bl	80061c0 <RCCEx_PLL2_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80052ca:	e012      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f826 	bl	8006324 <RCCEx_PLL3_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80052dc:	e009      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	75fb      	strb	r3, [r7, #23]
      break;
 80052e2:	e006      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005306:	4928      	ldr	r1, [pc, #160]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005308:	4313      	orrs	r3, r2
 800530a:	658b      	str	r3, [r1, #88]	; 0x58
 800530c:	e001      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02f      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005326:	d00e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532c:	d814      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005336:	d10f      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005338:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005344:	e00c      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	2101      	movs	r1, #1
 800534c:	4618      	mov	r0, r3
 800534e:	f000 ff37 	bl	80061c0 <RCCEx_PLL2_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
      break;
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	490d      	ldr	r1, [pc, #52]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	650b      	str	r3, [r1, #80]	; 0x50
 8005378:	e001      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d033      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	2b03      	cmp	r3, #3
 8005390:	d81c      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053d3 	.word	0x080053d3
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053bb 	.word	0x080053bb
 80053a4:	080053d3 	.word	0x080053d3
 80053a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ac:	4bb8      	ldr	r3, [pc, #736]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	4ab7      	ldr	r2, [pc, #732]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053b8:	e00c      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fefd 	bl	80061c0 <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
      break;
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80053d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053da:	4bad      	ldr	r3, [pc, #692]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	49aa      	ldr	r1, [pc, #680]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053ec:	e001      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 8086 	beq.w	800550c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005400:	4ba4      	ldr	r3, [pc, #656]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4aa3      	ldr	r2, [pc, #652]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800540c:	f7fb fee2 	bl	80011d4 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005412:	e009      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005414:	f7fb fede 	bl	80011d4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d902      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	75fb      	strb	r3, [r7, #23]
        break;
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005428:	4b9a      	ldr	r3, [pc, #616]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ef      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d166      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800543a:	4b95      	ldr	r3, [pc, #596]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800543c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005444:	4053      	eors	r3, r2
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	2b00      	cmp	r3, #0
 800544c:	d013      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800544e:	4b90      	ldr	r3, [pc, #576]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005456:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005458:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	4a8c      	ldr	r2, [pc, #560]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800545e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005462:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005464:	4b8a      	ldr	r3, [pc, #552]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005468:	4a89      	ldr	r2, [pc, #548]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005470:	4a87      	ldr	r2, [pc, #540]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d115      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fb fea7 	bl	80011d4 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005488:	e00b      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548a:	f7fb fea3 	bl	80011d4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f241 3288 	movw	r2, #5000	; 0x1388
 8005498:	4293      	cmp	r3, r2
 800549a:	d902      	bls.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	75fb      	strb	r3, [r7, #23]
            break;
 80054a0:	e005      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054a2:	4b7b      	ldr	r3, [pc, #492]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ed      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d126      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c2:	d10d      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80054c4:	4b72      	ldr	r3, [pc, #456]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054d2:	0919      	lsrs	r1, r3, #4
 80054d4:	4b70      	ldr	r3, [pc, #448]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80054d6:	400b      	ands	r3, r1
 80054d8:	496d      	ldr	r1, [pc, #436]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	610b      	str	r3, [r1, #16]
 80054de:	e005      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80054e0:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	4a6a      	ldr	r2, [pc, #424]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054ea:	6113      	str	r3, [r2, #16]
 80054ec:	4b68      	ldr	r3, [pc, #416]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fa:	4965      	ldr	r1, [pc, #404]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	670b      	str	r3, [r1, #112]	; 0x70
 8005500:	e004      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	75bb      	strb	r3, [r7, #22]
 8005506:	e001      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d07e      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551c:	2b28      	cmp	r3, #40	; 0x28
 800551e:	d867      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	080055f7 	.word	0x080055f7
 800552c:	080055f1 	.word	0x080055f1
 8005530:	080055f1 	.word	0x080055f1
 8005534:	080055f1 	.word	0x080055f1
 8005538:	080055f1 	.word	0x080055f1
 800553c:	080055f1 	.word	0x080055f1
 8005540:	080055f1 	.word	0x080055f1
 8005544:	080055f1 	.word	0x080055f1
 8005548:	080055cd 	.word	0x080055cd
 800554c:	080055f1 	.word	0x080055f1
 8005550:	080055f1 	.word	0x080055f1
 8005554:	080055f1 	.word	0x080055f1
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080055f1 	.word	0x080055f1
 8005560:	080055f1 	.word	0x080055f1
 8005564:	080055f1 	.word	0x080055f1
 8005568:	080055df 	.word	0x080055df
 800556c:	080055f1 	.word	0x080055f1
 8005570:	080055f1 	.word	0x080055f1
 8005574:	080055f1 	.word	0x080055f1
 8005578:	080055f1 	.word	0x080055f1
 800557c:	080055f1 	.word	0x080055f1
 8005580:	080055f1 	.word	0x080055f1
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080055f7 	.word	0x080055f7
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055f1 	.word	0x080055f1
 8005594:	080055f1 	.word	0x080055f1
 8005598:	080055f1 	.word	0x080055f1
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	080055f1 	.word	0x080055f1
 80055a8:	080055f7 	.word	0x080055f7
 80055ac:	080055f1 	.word	0x080055f1
 80055b0:	080055f1 	.word	0x080055f1
 80055b4:	080055f1 	.word	0x080055f1
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	080055f7 	.word	0x080055f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fdf4 	bl	80061c0 <RCCEx_PLL2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055dc:	e00c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3324      	adds	r3, #36	; 0x24
 80055e2:	2101      	movs	r1, #1
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fe9d 	bl	8006324 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	e000      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80055f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560a:	4921      	ldr	r1, [pc, #132]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	654b      	str	r3, [r1, #84]	; 0x54
 8005610:	e001      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03e      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	2b05      	cmp	r3, #5
 8005628:	d820      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005673 	.word	0x08005673
 8005634:	08005649 	.word	0x08005649
 8005638:	0800565b 	.word	0x0800565b
 800563c:	08005673 	.word	0x08005673
 8005640:	08005673 	.word	0x08005673
 8005644:	08005673 	.word	0x08005673
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fdb6 	bl	80061c0 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005658:	e00c      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fe5f 	bl	8006324 <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800566a:	e003      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e000      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d110      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	f023 0207 	bic.w	r2, r3, #7
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005686:	4902      	ldr	r1, [pc, #8]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005688:	4313      	orrs	r3, r2
 800568a:	654b      	str	r3, [r1, #84]	; 0x54
 800568c:	e008      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
 8005694:	58024800 	.word	0x58024800
 8005698:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d039      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d820      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056ff 	.word	0x080056ff
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056e7 	.word	0x080056e7
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	080056ff 	.word	0x080056ff
 80056d0:	080056ff 	.word	0x080056ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fd70 	bl	80061c0 <RCCEx_PLL2_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056e4:	e00c      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3324      	adds	r3, #36	; 0x24
 80056ea:	2101      	movs	r1, #1
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fe19 	bl	8006324 <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
      break;
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80056fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005706:	4bb7      	ldr	r3, [pc, #732]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	f023 0207 	bic.w	r2, r3, #7
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	49b3      	ldr	r1, [pc, #716]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005716:	4313      	orrs	r3, r2
 8005718:	658b      	str	r3, [r1, #88]	; 0x58
 800571a:	e001      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d04b      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005736:	d02e      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800573c:	d828      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d02a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d822      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800574a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800574e:	d026      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005754:	d81c      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575a:	d010      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800575c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005760:	d816      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01d      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800576a:	d111      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd24 	bl	80061c0 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800577c:	e012      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3324      	adds	r3, #36	; 0x24
 8005782:	2102      	movs	r1, #2
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fdcd 	bl	8006324 <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800578e:	e009      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	e006      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005796:	bf00      	nop
 8005798:	e004      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057aa:	4b8e      	ldr	r3, [pc, #568]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b8:	498a      	ldr	r1, [pc, #552]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	654b      	str	r3, [r1, #84]	; 0x54
 80057be:	e001      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d04b      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057da:	d02e      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80057dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057e0:	d828      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d02a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d822      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f2:	d026      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80057f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f8:	d81c      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fe:	d010      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d816      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01d      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d111      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fcd2 	bl	80061c0 <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005820:	e012      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3324      	adds	r3, #36	; 0x24
 8005826:	2102      	movs	r1, #2
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fd7b 	bl	8006324 <RCCEx_PLL3_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005832:	e009      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
      break;
 8005838:	e006      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800583a:	bf00      	nop
 800583c:	e004      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800584e:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585c:	4961      	ldr	r1, [pc, #388]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800585e:	4313      	orrs	r3, r2
 8005860:	658b      	str	r3, [r1, #88]	; 0x58
 8005862:	e001      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b00      	cmp	r3, #0
 8005872:	d04b      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800587e:	d02e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005880:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005884:	d828      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588a:	d02a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	d822      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005892:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005896:	d026      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005898:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800589c:	d81c      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800589e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a2:	d010      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d816      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	d111      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fc80 	bl	80061c0 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058c4:	e012      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3324      	adds	r3, #36	; 0x24
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fd29 	bl	8006324 <RCCEx_PLL3_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058d6:	e009      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058de:	bf00      	nop
 80058e0:	e004      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058f2:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005900:	4938      	ldr	r1, [pc, #224]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005902:	4313      	orrs	r3, r2
 8005904:	658b      	str	r3, [r1, #88]	; 0x58
 8005906:	e001      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005922:	d10a      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2102      	movs	r1, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fcfa 	bl	8006324 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005948:	4926      	ldr	r1, [pc, #152]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800594a:	4313      	orrs	r3, r2
 800594c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	d10a      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fcd9 	bl	8006324 <RCCEx_PLL3_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598a:	4916      	ldr	r1, [pc, #88]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800598c:	4313      	orrs	r3, r2
 800598e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d036      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059a6:	d01f      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80059a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ac:	d817      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80059b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b6:	d009      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80059b8:	e011      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fbfd 	bl	80061c0 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059ca:	e00e      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3324      	adds	r3, #36	; 0x24
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fca6 	bl	8006324 <RCCEx_PLL3_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059dc:	e005      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
      break;
 80059e2:	e002      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80059e4:	58024400 	.word	0x58024400
      break;
 80059e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059f0:	4b93      	ldr	r3, [pc, #588]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059fe:	4990      	ldr	r1, [pc, #576]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	658b      	str	r3, [r1, #88]	; 0x58
 8005a04:	e001      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d033      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a20:	d01c      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a26:	d816      	bhi.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a32:	d007      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005a34:	e00f      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a36:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a81      	ldr	r2, [pc, #516]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a42:	e00c      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc6a 	bl	8006324 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a54:	e003      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a64:	4b76      	ldr	r3, [pc, #472]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a72:	4973      	ldr	r1, [pc, #460]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	654b      	str	r3, [r1, #84]	; 0x54
 8005a78:	e001      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d029      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a96:	d007      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005a98:	e00f      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9a:	4b69      	ldr	r3, [pc, #420]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	4a68      	ldr	r2, [pc, #416]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005aa6:	e00b      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fb86 	bl	80061c0 <RCCEx_PLL2_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
      break;
 8005abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ac6:	4b5e      	ldr	r3, [pc, #376]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	495b      	ldr	r1, [pc, #364]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ad8:	e001      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	2102      	movs	r1, #2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fc17 	bl	8006324 <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d030      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b14:	d017      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1a:	d811      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b20:	d013      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b26:	d80b      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b30:	d106      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	4a42      	ldr	r2, [pc, #264]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b3e:	e007      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
      break;
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b56:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b62:	4937      	ldr	r1, [pc, #220]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	654b      	str	r3, [r1, #84]	; 0x54
 8005b68:	e001      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	492e      	ldr	r1, [pc, #184]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ba6:	4926      	ldr	r1, [pc, #152]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb8:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc4:	491e      	ldr	r1, [pc, #120]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bec:	4914      	ldr	r1, [pc, #80]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da08      	bge.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c06:	490e      	ldr	r1, [pc, #56]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	4906      	ldr	r1, [pc, #24]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c2c:	7dbb      	ldrb	r3, [r7, #22]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400

08005c44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c48:	f7ff f860 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	4904      	ldr	r1, [pc, #16]	; (8005c6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	08009d1c 	.word	0x08009d1c

08005c70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c78:	4ba1      	ldr	r3, [pc, #644]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c82:	4b9f      	ldr	r3, [pc, #636]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	0b1b      	lsrs	r3, r3, #12
 8005c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c8e:	4b9c      	ldr	r3, [pc, #624]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c9a:	4b99      	ldr	r3, [pc, #612]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	08db      	lsrs	r3, r3, #3
 8005ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8111 	beq.w	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f000 8083 	beq.w	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f200 80a1 	bhi.w	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d056      	beq.n	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cda:	e099      	b.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cdc:	4b88      	ldr	r3, [pc, #544]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02d      	beq.n	8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ce8:	4b85      	ldr	r3, [pc, #532]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	4a84      	ldr	r2, [pc, #528]	; (8005f04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d42:	e087      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d86:	e065      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b59      	ldr	r3, [pc, #356]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dca:	e043      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b48      	ldr	r3, [pc, #288]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0e:	e021      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e54:	4b2a      	ldr	r3, [pc, #168]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	0a5b      	lsrs	r3, r3, #9
 8005e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e7a:	ee17 2a90 	vmov	r2, s15
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e82:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	0c1b      	lsrs	r3, r3, #16
 8005e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea8:	ee17 2a90 	vmov	r2, s15
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	0e1b      	lsrs	r3, r3, #24
 8005eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed6:	ee17 2a90 	vmov	r2, s15
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ede:	e008      	b.n	8005ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	609a      	str	r2, [r3, #8]
}
 8005ef2:	bf00      	nop
 8005ef4:	3724      	adds	r7, #36	; 0x24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	58024400 	.word	0x58024400
 8005f04:	03d09000 	.word	0x03d09000
 8005f08:	46000000 	.word	0x46000000
 8005f0c:	4c742400 	.word	0x4c742400
 8005f10:	4a742400 	.word	0x4a742400
 8005f14:	4bbebc20 	.word	0x4bbebc20

08005f18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b089      	sub	sp, #36	; 0x24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f20:	4ba1      	ldr	r3, [pc, #644]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f2a:	4b9f      	ldr	r3, [pc, #636]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	0d1b      	lsrs	r3, r3, #20
 8005f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f36:	4b9c      	ldr	r3, [pc, #624]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f42:	4b99      	ldr	r3, [pc, #612]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8111 	beq.w	8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	f000 8083 	beq.w	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	f200 80a1 	bhi.w	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d056      	beq.n	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f82:	e099      	b.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f84:	4b88      	ldr	r3, [pc, #544]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d02d      	beq.n	8005fec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f90:	4b85      	ldr	r3, [pc, #532]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	4a84      	ldr	r2, [pc, #528]	; (80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	4b7b      	ldr	r3, [pc, #492]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fea:	e087      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006012:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602e:	e065      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b59      	ldr	r3, [pc, #356]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a03 	vldr	s12, [r7, #12]
 8006056:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006072:	e043      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006086:	4b48      	ldr	r3, [pc, #288]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006096:	ed97 6a03 	vldr	s12, [r7, #12]
 800609a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b6:	e021      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ca:	4b37      	ldr	r3, [pc, #220]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060da:	ed97 6a03 	vldr	s12, [r7, #12]
 80060de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060fc:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	0a5b      	lsrs	r3, r3, #9
 8006102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006116:	edd7 6a07 	vldr	s13, [r7, #28]
 800611a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006122:	ee17 2a90 	vmov	r2, s15
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800612a:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006140:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006144:	edd7 6a07 	vldr	s13, [r7, #28]
 8006148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006150:	ee17 2a90 	vmov	r2, s15
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006172:	edd7 6a07 	vldr	s13, [r7, #28]
 8006176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617e:	ee17 2a90 	vmov	r2, s15
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006186:	e008      	b.n	800619a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	609a      	str	r2, [r3, #8]
}
 800619a:	bf00      	nop
 800619c:	3724      	adds	r7, #36	; 0x24
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	58024400 	.word	0x58024400
 80061ac:	03d09000 	.word	0x03d09000
 80061b0:	46000000 	.word	0x46000000
 80061b4:	4c742400 	.word	0x4c742400
 80061b8:	4a742400 	.word	0x4a742400
 80061bc:	4bbebc20 	.word	0x4bbebc20

080061c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061ce:	4b53      	ldr	r3, [pc, #332]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d101      	bne.n	80061de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e099      	b.n	8006312 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a4e      	ldr	r2, [pc, #312]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80061e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ea:	f7fa fff3 	bl	80011d4 <HAL_GetTick>
 80061ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061f0:	e008      	b.n	8006204 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061f2:	f7fa ffef 	bl	80011d4 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e086      	b.n	8006312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006204:	4b45      	ldr	r3, [pc, #276]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f0      	bne.n	80061f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006210:	4b42      	ldr	r3, [pc, #264]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	493f      	ldr	r1, [pc, #252]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	628b      	str	r3, [r1, #40]	; 0x28
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	3b01      	subs	r3, #1
 800622a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	3b01      	subs	r3, #1
 8006234:	025b      	lsls	r3, r3, #9
 8006236:	b29b      	uxth	r3, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	3b01      	subs	r3, #1
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	3b01      	subs	r3, #1
 800624e:	061b      	lsls	r3, r3, #24
 8006250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006254:	4931      	ldr	r1, [pc, #196]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	492d      	ldr	r1, [pc, #180]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006268:	4313      	orrs	r3, r2
 800626a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800626c:	4b2b      	ldr	r3, [pc, #172]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	f023 0220 	bic.w	r2, r3, #32
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	4928      	ldr	r1, [pc, #160]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800627e:	4b27      	ldr	r3, [pc, #156]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	4a26      	ldr	r2, [pc, #152]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006284:	f023 0310 	bic.w	r3, r3, #16
 8006288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 800628c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <RCCEx_PLL2_Config+0x160>)
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	69d2      	ldr	r2, [r2, #28]
 8006296:	00d2      	lsls	r2, r2, #3
 8006298:	4920      	ldr	r1, [pc, #128]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 800629a:	4313      	orrs	r3, r2
 800629c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800629e:	4b1f      	ldr	r3, [pc, #124]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062b0:	4b1a      	ldr	r3, [pc, #104]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062bc:	e00f      	b.n	80062de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d106      	bne.n	80062d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062c4:	4b15      	ldr	r3, [pc, #84]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	4a14      	ldr	r2, [pc, #80]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062d0:	e005      	b.n	80062de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	4a11      	ldr	r2, [pc, #68]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a0e      	ldr	r2, [pc, #56]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 80062e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ea:	f7fa ff73 	bl	80011d4 <HAL_GetTick>
 80062ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062f0:	e008      	b.n	8006304 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062f2:	f7fa ff6f 	bl	80011d4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e006      	b.n	8006312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <RCCEx_PLL2_Config+0x15c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
 8006320:	ffff0007 	.word	0xffff0007

08006324 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006332:	4b53      	ldr	r3, [pc, #332]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d101      	bne.n	8006342 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e099      	b.n	8006476 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006342:	4b4f      	ldr	r3, [pc, #316]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634e:	f7fa ff41 	bl	80011d4 <HAL_GetTick>
 8006352:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006354:	e008      	b.n	8006368 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006356:	f7fa ff3d 	bl	80011d4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e086      	b.n	8006476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f0      	bne.n	8006356 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	051b      	lsls	r3, r3, #20
 8006382:	493f      	ldr	r1, [pc, #252]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006384:	4313      	orrs	r3, r2
 8006386:	628b      	str	r3, [r1, #40]	; 0x28
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	3b01      	subs	r3, #1
 800638e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	3b01      	subs	r3, #1
 8006398:	025b      	lsls	r3, r3, #9
 800639a:	b29b      	uxth	r3, r3
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	041b      	lsls	r3, r3, #16
 80063a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	061b      	lsls	r3, r3, #24
 80063b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063b8:	4931      	ldr	r1, [pc, #196]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063be:	4b30      	ldr	r3, [pc, #192]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	492d      	ldr	r1, [pc, #180]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063d0:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	4928      	ldr	r1, [pc, #160]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063e2:	4b27      	ldr	r3, [pc, #156]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <RCCEx_PLL3_Config+0x160>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	69d2      	ldr	r2, [r2, #28]
 80063fa:	00d2      	lsls	r2, r2, #3
 80063fc:	4920      	ldr	r1, [pc, #128]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a19      	ldr	r2, [pc, #100]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800641a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800641e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006420:	e00f      	b.n	8006442 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d106      	bne.n	8006436 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006428:	4b15      	ldr	r3, [pc, #84]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800642e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006434:	e005      	b.n	8006442 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a11      	ldr	r2, [pc, #68]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800643c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644e:	f7fa fec1 	bl	80011d4 <HAL_GetTick>
 8006452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006454:	e008      	b.n	8006468 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006456:	f7fa febd 	bl	80011d4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e006      	b.n	8006476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <RCCEx_PLL3_Config+0x15c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
 8006484:	ffff0007 	.word	0xffff0007

08006488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e049      	b.n	800652e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fa fc18 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fc62 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e054      	b.n	80065fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <HAL_TIM_Base_Start_IT+0xd0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d022      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657a:	d01d      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a22      	ldr	r2, [pc, #136]	; (800660c <HAL_TIM_Base_Start_IT+0xd4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a21      	ldr	r2, [pc, #132]	; (8006610 <HAL_TIM_Base_Start_IT+0xd8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <HAL_TIM_Base_Start_IT+0xdc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_TIM_Base_Start_IT+0xe0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <HAL_TIM_Base_Start_IT+0xe4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x80>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1b      	ldr	r2, [pc, #108]	; (8006620 <HAL_TIM_Base_Start_IT+0xe8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d115      	bne.n	80065e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	4b19      	ldr	r3, [pc, #100]	; (8006624 <HAL_TIM_Base_Start_IT+0xec>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d015      	beq.n	80065f6 <HAL_TIM_Base_Start_IT+0xbe>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d011      	beq.n	80065f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e2:	e008      	b.n	80065f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e000      	b.n	80065f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40001800 	.word	0x40001800
 8006620:	40014000 	.word	0x40014000
 8006624:	00010007 	.word	0x00010007

08006628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e049      	b.n	80066ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa fb6e 	bl	8000d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f000 fb92 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d122      	bne.n	8006732 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d11b      	bne.n	8006732 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0202 	mvn.w	r2, #2
 8006702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb1b 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 800671e:	e005      	b.n	800672c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb0d 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fb1e 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b04      	cmp	r3, #4
 800673e:	d122      	bne.n	8006786 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b04      	cmp	r3, #4
 800674c:	d11b      	bne.n	8006786 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0204 	mvn.w	r2, #4
 8006756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 faf1 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 8006772:	e005      	b.n	8006780 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fae3 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 faf4 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d122      	bne.n	80067da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d11b      	bne.n	80067da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0208 	mvn.w	r2, #8
 80067aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2204      	movs	r2, #4
 80067b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fac7 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 80067c6:	e005      	b.n	80067d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fab9 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 faca 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d122      	bne.n	800682e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d11b      	bne.n	800682e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f06f 0210 	mvn.w	r2, #16
 80067fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2208      	movs	r2, #8
 8006804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa9d 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 800681a:	e005      	b.n	8006828 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa8f 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 faa0 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b01      	cmp	r3, #1
 800683a:	d10e      	bne.n	800685a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	d107      	bne.n	800685a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f06f 0201 	mvn.w	r2, #1
 8006852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa69 	bl	8006d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d10e      	bne.n	8006886 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d107      	bne.n	8006886 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800687e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 ff2b 	bl	80076dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006894:	d10e      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	2b80      	cmp	r3, #128	; 0x80
 80068a2:	d107      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff1e 	bl	80076f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d10e      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d107      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa4e 	bl	8006d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d10e      	bne.n	800690c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d107      	bne.n	800690c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0220 	mvn.w	r2, #32
 8006904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fede 	bl	80076c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800692e:	2302      	movs	r3, #2
 8006930:	e0ff      	b.n	8006b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b14      	cmp	r3, #20
 800693e:	f200 80f0 	bhi.w	8006b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	0800699d 	.word	0x0800699d
 800694c:	08006b23 	.word	0x08006b23
 8006950:	08006b23 	.word	0x08006b23
 8006954:	08006b23 	.word	0x08006b23
 8006958:	080069dd 	.word	0x080069dd
 800695c:	08006b23 	.word	0x08006b23
 8006960:	08006b23 	.word	0x08006b23
 8006964:	08006b23 	.word	0x08006b23
 8006968:	08006a1f 	.word	0x08006a1f
 800696c:	08006b23 	.word	0x08006b23
 8006970:	08006b23 	.word	0x08006b23
 8006974:	08006b23 	.word	0x08006b23
 8006978:	08006a5f 	.word	0x08006a5f
 800697c:	08006b23 	.word	0x08006b23
 8006980:	08006b23 	.word	0x08006b23
 8006984:	08006b23 	.word	0x08006b23
 8006988:	08006aa1 	.word	0x08006aa1
 800698c:	08006b23 	.word	0x08006b23
 8006990:	08006b23 	.word	0x08006b23
 8006994:	08006b23 	.word	0x08006b23
 8006998:	08006ae1 	.word	0x08006ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa8e 	bl	8006ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0208 	orr.w	r2, r2, #8
 80069b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0204 	bic.w	r2, r2, #4
 80069c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6999      	ldr	r1, [r3, #24]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	619a      	str	r2, [r3, #24]
      break;
 80069da:	e0a5      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fafe 	bl	8006fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	619a      	str	r2, [r3, #24]
      break;
 8006a1c:	e084      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb67 	bl	80070f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0208 	orr.w	r2, r2, #8
 8006a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0204 	bic.w	r2, r2, #4
 8006a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69d9      	ldr	r1, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	61da      	str	r2, [r3, #28]
      break;
 8006a5c:	e064      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fbcf 	bl	8007208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	021a      	lsls	r2, r3, #8
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	61da      	str	r2, [r3, #28]
      break;
 8006a9e:	e043      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fc18 	bl	80072dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0208 	orr.w	r2, r2, #8
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0204 	bic.w	r2, r2, #4
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ade:	e023      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fc5c 	bl	80073a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	021a      	lsls	r2, r3, #8
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b20:	e002      	b.n	8006b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
      break;
 8006b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIM_ConfigClockSource+0x1c>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e0dc      	b.n	8006d12 <HAL_TIM_ConfigClockSource+0x1d6>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4b6a      	ldr	r3, [pc, #424]	; (8006d1c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a64      	ldr	r2, [pc, #400]	; (8006d20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	f000 80a9 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006b94:	4a62      	ldr	r2, [pc, #392]	; (8006d20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	f200 80ae 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006b9c:	4a61      	ldr	r2, [pc, #388]	; (8006d24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f000 80a1 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ba4:	4a5f      	ldr	r2, [pc, #380]	; (8006d24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	f200 80a6 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bac:	4a5e      	ldr	r2, [pc, #376]	; (8006d28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	f000 8099 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006bb4:	4a5c      	ldr	r2, [pc, #368]	; (8006d28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	f200 809e 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006bc0:	f000 8091 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006bc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006bc8:	f200 8096 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd0:	f000 8089 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd8:	f200 808e 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be0:	d03e      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x124>
 8006be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be6:	f200 8087 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	f000 8086 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1c2>
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf6:	d87f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006bf8:	2b70      	cmp	r3, #112	; 0x70
 8006bfa:	d01a      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0xf6>
 8006bfc:	2b70      	cmp	r3, #112	; 0x70
 8006bfe:	d87b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c00:	2b60      	cmp	r3, #96	; 0x60
 8006c02:	d050      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x16a>
 8006c04:	2b60      	cmp	r3, #96	; 0x60
 8006c06:	d877      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c08:	2b50      	cmp	r3, #80	; 0x50
 8006c0a:	d03c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x14a>
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d873      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d058      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x18a>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d86f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d064      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d86b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d060      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d867      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d05c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d05a      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006c30:	e062      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6899      	ldr	r1, [r3, #8]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f000 fc93 	bl	800756c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	609a      	str	r2, [r3, #8]
      break;
 8006c5e:	e04f      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6899      	ldr	r1, [r3, #8]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f000 fc7c 	bl	800756c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c82:	609a      	str	r2, [r3, #8]
      break;
 8006c84:	e03c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fbec 	bl	8007470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2150      	movs	r1, #80	; 0x50
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc46 	bl	8007530 <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e02c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 fc0b 	bl	80074ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2160      	movs	r1, #96	; 0x60
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fc36 	bl	8007530 <TIM_ITRx_SetConfig>
      break;
 8006cc4:	e01c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 fbcc 	bl	8007470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fc26 	bl	8007530 <TIM_ITRx_SetConfig>
      break;
 8006ce4:	e00c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 fc1d 	bl	8007530 <TIM_ITRx_SetConfig>
      break;
 8006cf6:	e003      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e000      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	ffceff88 	.word	0xffceff88
 8006d20:	00100040 	.word	0x00100040
 8006d24:	00100030 	.word	0x00100030
 8006d28:	00100020 	.word	0x00100020

08006d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a40      	ldr	r2, [pc, #256]	; (8006ea4 <TIM_Base_SetConfig+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d00f      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <TIM_Base_SetConfig+0x118>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00b      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a3c      	ldr	r2, [pc, #240]	; (8006eac <TIM_Base_SetConfig+0x11c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d007      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a3b      	ldr	r2, [pc, #236]	; (8006eb0 <TIM_Base_SetConfig+0x120>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a3a      	ldr	r2, [pc, #232]	; (8006eb4 <TIM_Base_SetConfig+0x124>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2f      	ldr	r2, [pc, #188]	; (8006ea4 <TIM_Base_SetConfig+0x114>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01f      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d01b      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2c      	ldr	r2, [pc, #176]	; (8006ea8 <TIM_Base_SetConfig+0x118>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d017      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <TIM_Base_SetConfig+0x11c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2a      	ldr	r2, [pc, #168]	; (8006eb0 <TIM_Base_SetConfig+0x120>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a29      	ldr	r2, [pc, #164]	; (8006eb4 <TIM_Base_SetConfig+0x124>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a28      	ldr	r2, [pc, #160]	; (8006eb8 <TIM_Base_SetConfig+0x128>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d007      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a27      	ldr	r2, [pc, #156]	; (8006ebc <TIM_Base_SetConfig+0x12c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a26      	ldr	r2, [pc, #152]	; (8006ec0 <TIM_Base_SetConfig+0x130>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d108      	bne.n	8006e3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <TIM_Base_SetConfig+0x114>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0xf8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a12      	ldr	r2, [pc, #72]	; (8006eb4 <TIM_Base_SetConfig+0x124>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0xf8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <TIM_Base_SetConfig+0x128>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0xf8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <TIM_Base_SetConfig+0x12c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0xf8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a0f      	ldr	r2, [pc, #60]	; (8006ec0 <TIM_Base_SetConfig+0x130>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d103      	bne.n	8006e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	615a      	str	r2, [r3, #20]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40010000 	.word	0x40010000
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800
 8006eb0:	40000c00 	.word	0x40000c00
 8006eb4:	40010400 	.word	0x40010400
 8006eb8:	40014000 	.word	0x40014000
 8006ebc:	40014400 	.word	0x40014400
 8006ec0:	40014800 	.word	0x40014800

08006ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 0201 	bic.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <TIM_OC1_SetConfig+0x108>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f023 0302 	bic.w	r3, r3, #2
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <TIM_OC1_SetConfig+0x10c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00f      	beq.n	8006f40 <TIM_OC1_SetConfig+0x7c>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <TIM_OC1_SetConfig+0x110>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <TIM_OC1_SetConfig+0x7c>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a2b      	ldr	r2, [pc, #172]	; (8006fd8 <TIM_OC1_SetConfig+0x114>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d007      	beq.n	8006f40 <TIM_OC1_SetConfig+0x7c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <TIM_OC1_SetConfig+0x118>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_OC1_SetConfig+0x7c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a29      	ldr	r2, [pc, #164]	; (8006fe0 <TIM_OC1_SetConfig+0x11c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d10c      	bne.n	8006f5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0308 	bic.w	r3, r3, #8
 8006f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 0304 	bic.w	r3, r3, #4
 8006f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <TIM_OC1_SetConfig+0x10c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00f      	beq.n	8006f82 <TIM_OC1_SetConfig+0xbe>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <TIM_OC1_SetConfig+0x110>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <TIM_OC1_SetConfig+0xbe>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1a      	ldr	r2, [pc, #104]	; (8006fd8 <TIM_OC1_SetConfig+0x114>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <TIM_OC1_SetConfig+0xbe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a19      	ldr	r2, [pc, #100]	; (8006fdc <TIM_OC1_SetConfig+0x118>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_OC1_SetConfig+0xbe>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <TIM_OC1_SetConfig+0x11c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d111      	bne.n	8006fa6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	fffeff8f 	.word	0xfffeff8f
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0210 	bic.w	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <TIM_OC2_SetConfig+0xfc>)
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a29      	ldr	r2, [pc, #164]	; (80070e4 <TIM_OC2_SetConfig+0x100>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC2_SetConfig+0x68>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a28      	ldr	r2, [pc, #160]	; (80070e8 <TIM_OC2_SetConfig+0x104>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d10d      	bne.n	8007068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <TIM_OC2_SetConfig+0x100>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00f      	beq.n	8007090 <TIM_OC2_SetConfig+0xac>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <TIM_OC2_SetConfig+0x104>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00b      	beq.n	8007090 <TIM_OC2_SetConfig+0xac>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <TIM_OC2_SetConfig+0x108>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d007      	beq.n	8007090 <TIM_OC2_SetConfig+0xac>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <TIM_OC2_SetConfig+0x10c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_OC2_SetConfig+0xac>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <TIM_OC2_SetConfig+0x110>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d113      	bne.n	80070b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800709e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	feff8fff 	.word	0xfeff8fff
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40010400 	.word	0x40010400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800

080070f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4b33      	ldr	r3, [pc, #204]	; (80071f0 <TIM_OC3_SetConfig+0xf8>)
 8007124:	4013      	ands	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <TIM_OC3_SetConfig+0xfc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_OC3_SetConfig+0x66>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <TIM_OC3_SetConfig+0x100>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10d      	bne.n	800717a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <TIM_OC3_SetConfig+0xfc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00f      	beq.n	80071a2 <TIM_OC3_SetConfig+0xaa>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <TIM_OC3_SetConfig+0x100>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00b      	beq.n	80071a2 <TIM_OC3_SetConfig+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <TIM_OC3_SetConfig+0x104>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d007      	beq.n	80071a2 <TIM_OC3_SetConfig+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <TIM_OC3_SetConfig+0x108>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC3_SetConfig+0xaa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a19      	ldr	r2, [pc, #100]	; (8007204 <TIM_OC3_SetConfig+0x10c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d113      	bne.n	80071ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	fffeff8f 	.word	0xfffeff8f
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40010400 	.word	0x40010400
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800

08007208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <TIM_OC4_SetConfig+0xbc>)
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	031b      	lsls	r3, r3, #12
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a19      	ldr	r2, [pc, #100]	; (80072c8 <TIM_OC4_SetConfig+0xc0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00f      	beq.n	8007288 <TIM_OC4_SetConfig+0x80>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a18      	ldr	r2, [pc, #96]	; (80072cc <TIM_OC4_SetConfig+0xc4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_OC4_SetConfig+0x80>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <TIM_OC4_SetConfig+0xc8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_OC4_SetConfig+0x80>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <TIM_OC4_SetConfig+0xcc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC4_SetConfig+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <TIM_OC4_SetConfig+0xd0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d109      	bne.n	800729c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	019b      	lsls	r3, r3, #6
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	feff8fff 	.word	0xfeff8fff
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400
 80072d8:	40014800 	.word	0x40014800

080072dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4b21      	ldr	r3, [pc, #132]	; (800738c <TIM_OC5_SetConfig+0xb0>)
 8007308:	4013      	ands	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800731c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a18      	ldr	r2, [pc, #96]	; (8007390 <TIM_OC5_SetConfig+0xb4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00f      	beq.n	8007352 <TIM_OC5_SetConfig+0x76>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a17      	ldr	r2, [pc, #92]	; (8007394 <TIM_OC5_SetConfig+0xb8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00b      	beq.n	8007352 <TIM_OC5_SetConfig+0x76>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <TIM_OC5_SetConfig+0xbc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <TIM_OC5_SetConfig+0x76>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a15      	ldr	r2, [pc, #84]	; (800739c <TIM_OC5_SetConfig+0xc0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC5_SetConfig+0x76>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <TIM_OC5_SetConfig+0xc4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d109      	bne.n	8007366 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	fffeff8f 	.word	0xfffeff8f
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400
 80073a0:	40014800 	.word	0x40014800

080073a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4b22      	ldr	r3, [pc, #136]	; (8007458 <TIM_OC6_SetConfig+0xb4>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	051b      	lsls	r3, r3, #20
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a19      	ldr	r2, [pc, #100]	; (800745c <TIM_OC6_SetConfig+0xb8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00f      	beq.n	800741c <TIM_OC6_SetConfig+0x78>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a18      	ldr	r2, [pc, #96]	; (8007460 <TIM_OC6_SetConfig+0xbc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00b      	beq.n	800741c <TIM_OC6_SetConfig+0x78>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <TIM_OC6_SetConfig+0xc0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_OC6_SetConfig+0x78>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <TIM_OC6_SetConfig+0xc4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_OC6_SetConfig+0x78>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a15      	ldr	r2, [pc, #84]	; (800746c <TIM_OC6_SetConfig+0xc8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d109      	bne.n	8007430 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	feff8fff 	.word	0xfeff8fff
 800745c:	40010000 	.word	0x40010000
 8007460:	40010400 	.word	0x40010400
 8007464:	40014000 	.word	0x40014000
 8007468:	40014400 	.word	0x40014400
 800746c:	40014800 	.word	0x40014800

08007470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f023 0201 	bic.w	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800749a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f023 030a 	bic.w	r3, r3, #10
 80074ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f023 0210 	bic.w	r2, r3, #16
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800750a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <TIM_ITRx_SetConfig+0x38>)
 8007544:	4013      	ands	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	f043 0307 	orr.w	r3, r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	609a      	str	r2, [r3, #8]
}
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	ffcfff8f 	.word	0xffcfff8f

0800756c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	431a      	orrs	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e06d      	b.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a30      	ldr	r2, [pc, #192]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2f      	ldr	r2, [pc, #188]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d108      	bne.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a20      	ldr	r2, [pc, #128]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d01d      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1a      	ldr	r2, [pc, #104]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a15      	ldr	r2, [pc, #84]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10c      	bne.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40001800 	.word	0x40001800
 80076c4:	40014000 	.word	0x40014000

080076c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e042      	b.n	800779c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7f9 fb5d 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	; 0x24
 8007732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc4a 	bl	8007fe0 <UART_SetConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e022      	b.n	800779c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f99e 	bl	8008aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fa25 	bl	8008be4 <UART_CheckIdleState>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d142      	bne.n	8007842 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_UART_Receive_IT+0x24>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e03b      	b.n	8007844 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_UART_Receive_IT+0x36>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e034      	b.n	8007844 <HAL_UART_Receive_IT+0xa0>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <HAL_UART_Receive_IT+0xa8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01f      	beq.n	8007832 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d018      	beq.n	8007832 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	613b      	str	r3, [r7, #16]
   return(result);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	623b      	str	r3, [r7, #32]
 8007820:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	69f9      	ldr	r1, [r7, #28]
 8007824:	6a3a      	ldr	r2, [r7, #32]
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	61bb      	str	r3, [r7, #24]
   return(result);
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e6      	bne.n	8007800 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	461a      	mov	r2, r3
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f001 fae7 	bl	8008e0c <UART_Start_Receive_IT>
 800783e:	4603      	mov	r3, r0
 8007840:	e000      	b.n	8007844 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007842:	2302      	movs	r3, #2
  }
}
 8007844:	4618      	mov	r0, r3
 8007846:	3728      	adds	r7, #40	; 0x28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	58000c00 	.word	0x58000c00

08007850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b0ba      	sub	sp, #232	; 0xe8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800787a:	f640 030f 	movw	r3, #2063	; 0x80f
 800787e:	4013      	ands	r3, r2
 8007880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d11b      	bne.n	80078c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 835a 	beq.w	8007f6e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
      }
      return;
 80078c2:	e354      	b.n	8007f6e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 811f 	beq.w	8007b0c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078d2:	4b8b      	ldr	r3, [pc, #556]	; (8007b00 <HAL_UART_IRQHandler+0x2b0>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80078de:	4b89      	ldr	r3, [pc, #548]	; (8007b04 <HAL_UART_IRQHandler+0x2b4>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8112 	beq.w	8007b0c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d011      	beq.n	8007918 <HAL_UART_IRQHandler+0xc8>
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2201      	movs	r2, #1
 8007906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800790e:	f043 0201 	orr.w	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <HAL_UART_IRQHandler+0xf8>
 8007924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2202      	movs	r2, #2
 8007936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d011      	beq.n	8007978 <HAL_UART_IRQHandler+0x128>
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2204      	movs	r2, #4
 8007966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007990:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007994:	4b5a      	ldr	r3, [pc, #360]	; (8007b00 <HAL_UART_IRQHandler+0x2b0>)
 8007996:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2208      	movs	r2, #8
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079aa:	f043 0208 	orr.w	r2, r3, #8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d012      	beq.n	80079e6 <HAL_UART_IRQHandler+0x196>
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00c      	beq.n	80079e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079dc:	f043 0220 	orr.w	r2, r3, #32
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 82c0 	beq.w	8007f72 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d013      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d005      	beq.n	8007a4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d04f      	beq.n	8007aea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fb08 	bl	8009060 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d141      	bne.n	8007ae2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1d9      	bne.n	8007a5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d013      	beq.n	8007ada <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab6:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <HAL_UART_IRQHandler+0x2b8>)
 8007ab8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fa fbc8 	bl	8002254 <HAL_DMA_Abort_IT>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d017      	beq.n	8007afa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad8:	e00f      	b.n	8007afa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa6a 	bl	8007fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae0:	e00b      	b.n	8007afa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa66 	bl	8007fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae8:	e007      	b.n	8007afa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa62 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007af8:	e23b      	b.n	8007f72 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afa:	bf00      	nop
    return;
 8007afc:	e239      	b.n	8007f72 <HAL_UART_IRQHandler+0x722>
 8007afe:	bf00      	nop
 8007b00:	10000001 	.word	0x10000001
 8007b04:	04000120 	.word	0x04000120
 8007b08:	0800912d 	.word	0x0800912d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	f040 81ce 	bne.w	8007eb2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 81c7 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 81c0 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2210      	movs	r2, #16
 8007b38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b40      	cmp	r3, #64	; 0x40
 8007b46:	f040 813b 	bne.w	8007dc0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a8b      	ldr	r2, [pc, #556]	; (8007d80 <HAL_UART_IRQHandler+0x530>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d059      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a89      	ldr	r2, [pc, #548]	; (8007d84 <HAL_UART_IRQHandler+0x534>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d053      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a87      	ldr	r2, [pc, #540]	; (8007d88 <HAL_UART_IRQHandler+0x538>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d04d      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a85      	ldr	r2, [pc, #532]	; (8007d8c <HAL_UART_IRQHandler+0x53c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d047      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a83      	ldr	r2, [pc, #524]	; (8007d90 <HAL_UART_IRQHandler+0x540>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d041      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a81      	ldr	r2, [pc, #516]	; (8007d94 <HAL_UART_IRQHandler+0x544>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d03b      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a7f      	ldr	r2, [pc, #508]	; (8007d98 <HAL_UART_IRQHandler+0x548>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d035      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a7d      	ldr	r2, [pc, #500]	; (8007d9c <HAL_UART_IRQHandler+0x54c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d02f      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7b      	ldr	r2, [pc, #492]	; (8007da0 <HAL_UART_IRQHandler+0x550>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d029      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a79      	ldr	r2, [pc, #484]	; (8007da4 <HAL_UART_IRQHandler+0x554>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d023      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a77      	ldr	r2, [pc, #476]	; (8007da8 <HAL_UART_IRQHandler+0x558>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01d      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a75      	ldr	r2, [pc, #468]	; (8007dac <HAL_UART_IRQHandler+0x55c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d017      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a73      	ldr	r2, [pc, #460]	; (8007db0 <HAL_UART_IRQHandler+0x560>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d011      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a71      	ldr	r2, [pc, #452]	; (8007db4 <HAL_UART_IRQHandler+0x564>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a6f      	ldr	r2, [pc, #444]	; (8007db8 <HAL_UART_IRQHandler+0x568>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0x3ba>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6d      	ldr	r2, [pc, #436]	; (8007dbc <HAL_UART_IRQHandler+0x56c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d105      	bne.n	8007c16 <HAL_UART_IRQHandler+0x3c6>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	e004      	b.n	8007c20 <HAL_UART_IRQHandler+0x3d0>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 81a4 	beq.w	8007f76 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	f080 819c 	bcs.w	8007f76 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	f000 8086 	beq.w	8007d62 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1da      	bne.n	8007c56 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ccc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e1      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e3      	bne.n	8007cdc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e4      	bne.n	8007d22 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7f9 ff5b 	bl	8001c18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f926 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d7c:	e0fb      	b.n	8007f76 <HAL_UART_IRQHandler+0x726>
 8007d7e:	bf00      	nop
 8007d80:	40020010 	.word	0x40020010
 8007d84:	40020028 	.word	0x40020028
 8007d88:	40020040 	.word	0x40020040
 8007d8c:	40020058 	.word	0x40020058
 8007d90:	40020070 	.word	0x40020070
 8007d94:	40020088 	.word	0x40020088
 8007d98:	400200a0 	.word	0x400200a0
 8007d9c:	400200b8 	.word	0x400200b8
 8007da0:	40020410 	.word	0x40020410
 8007da4:	40020428 	.word	0x40020428
 8007da8:	40020440 	.word	0x40020440
 8007dac:	40020458 	.word	0x40020458
 8007db0:	40020470 	.word	0x40020470
 8007db4:	40020488 	.word	0x40020488
 8007db8:	400204a0 	.word	0x400204a0
 8007dbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80cc 	beq.w	8007f7a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80c7 	beq.w	8007f7a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e4      	bne.n	8007dec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	623b      	str	r3, [r7, #32]
   return(result);
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	4b54      	ldr	r3, [pc, #336]	; (8007f88 <HAL_UART_IRQHandler+0x738>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e46:	633a      	str	r2, [r7, #48]	; 0x30
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e3      	bne.n	8007e22 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0310 	bic.w	r3, r3, #16
 8007e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e4      	bne.n	8007e6e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f88c 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eb0:	e063      	b.n	8007f7a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00e      	beq.n	8007edc <HAL_UART_IRQHandler+0x68c>
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fdc7 	bl	8009a68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eda:	e051      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d014      	beq.n	8007f12 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d03a      	beq.n	8007f7e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
    }
    return;
 8007f10:	e035      	b.n	8007f7e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_UART_IRQHandler+0x6e2>
 8007f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f914 	bl	8009158 <UART_EndTransmit_IT>
    return;
 8007f30:	e026      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <HAL_UART_IRQHandler+0x702>
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fda0 	bl	8009a90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f50:	e016      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d010      	beq.n	8007f80 <HAL_UART_IRQHandler+0x730>
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da0c      	bge.n	8007f80 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fd88 	bl	8009a7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f6c:	e008      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
      return;
 8007f6e:	bf00      	nop
 8007f70:	e006      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
    return;
 8007f72:	bf00      	nop
 8007f74:	e004      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
      return;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
      return;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_UART_IRQHandler+0x730>
    return;
 8007f7e:	bf00      	nop
  }
}
 8007f80:	37e8      	adds	r7, #232	; 0xe8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	effffffe 	.word	0xeffffffe

08007f8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	b5b0      	push	{r4, r5, r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	4313      	orrs	r3, r2
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	4bbf      	ldr	r3, [pc, #764]	; (800830c <UART_SetConfig+0x32c>)
 800800e:	4013      	ands	r3, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008016:	430b      	orrs	r3, r1
 8008018:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4ab5      	ldr	r2, [pc, #724]	; (8008310 <UART_SetConfig+0x330>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008046:	4313      	orrs	r3, r2
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	4bb0      	ldr	r3, [pc, #704]	; (8008314 <UART_SetConfig+0x334>)
 8008052:	4013      	ands	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800805a:	430b      	orrs	r3, r1
 800805c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	f023 010f 	bic.w	r1, r3, #15
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4aa7      	ldr	r2, [pc, #668]	; (8008318 <UART_SetConfig+0x338>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d176      	bne.n	800816c <UART_SetConfig+0x18c>
 800807e:	4ba7      	ldr	r3, [pc, #668]	; (800831c <UART_SetConfig+0x33c>)
 8008080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008086:	2b28      	cmp	r3, #40	; 0x28
 8008088:	d86c      	bhi.n	8008164 <UART_SetConfig+0x184>
 800808a:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0xb0>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	08008135 	.word	0x08008135
 8008094:	08008165 	.word	0x08008165
 8008098:	08008165 	.word	0x08008165
 800809c:	08008165 	.word	0x08008165
 80080a0:	08008165 	.word	0x08008165
 80080a4:	08008165 	.word	0x08008165
 80080a8:	08008165 	.word	0x08008165
 80080ac:	08008165 	.word	0x08008165
 80080b0:	0800813d 	.word	0x0800813d
 80080b4:	08008165 	.word	0x08008165
 80080b8:	08008165 	.word	0x08008165
 80080bc:	08008165 	.word	0x08008165
 80080c0:	08008165 	.word	0x08008165
 80080c4:	08008165 	.word	0x08008165
 80080c8:	08008165 	.word	0x08008165
 80080cc:	08008165 	.word	0x08008165
 80080d0:	08008145 	.word	0x08008145
 80080d4:	08008165 	.word	0x08008165
 80080d8:	08008165 	.word	0x08008165
 80080dc:	08008165 	.word	0x08008165
 80080e0:	08008165 	.word	0x08008165
 80080e4:	08008165 	.word	0x08008165
 80080e8:	08008165 	.word	0x08008165
 80080ec:	08008165 	.word	0x08008165
 80080f0:	0800814d 	.word	0x0800814d
 80080f4:	08008165 	.word	0x08008165
 80080f8:	08008165 	.word	0x08008165
 80080fc:	08008165 	.word	0x08008165
 8008100:	08008165 	.word	0x08008165
 8008104:	08008165 	.word	0x08008165
 8008108:	08008165 	.word	0x08008165
 800810c:	08008165 	.word	0x08008165
 8008110:	08008155 	.word	0x08008155
 8008114:	08008165 	.word	0x08008165
 8008118:	08008165 	.word	0x08008165
 800811c:	08008165 	.word	0x08008165
 8008120:	08008165 	.word	0x08008165
 8008124:	08008165 	.word	0x08008165
 8008128:	08008165 	.word	0x08008165
 800812c:	08008165 	.word	0x08008165
 8008130:	0800815d 	.word	0x0800815d
 8008134:	2301      	movs	r3, #1
 8008136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813a:	e222      	b.n	8008582 <UART_SetConfig+0x5a2>
 800813c:	2304      	movs	r3, #4
 800813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008142:	e21e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008144:	2308      	movs	r3, #8
 8008146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814a:	e21a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800814c:	2310      	movs	r3, #16
 800814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008152:	e216      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008154:	2320      	movs	r3, #32
 8008156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815a:	e212      	b.n	8008582 <UART_SetConfig+0x5a2>
 800815c:	2340      	movs	r3, #64	; 0x40
 800815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008162:	e20e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008164:	2380      	movs	r3, #128	; 0x80
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e20a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a6b      	ldr	r2, [pc, #428]	; (8008320 <UART_SetConfig+0x340>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d130      	bne.n	80081d8 <UART_SetConfig+0x1f8>
 8008176:	4b69      	ldr	r3, [pc, #420]	; (800831c <UART_SetConfig+0x33c>)
 8008178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b05      	cmp	r3, #5
 8008180:	d826      	bhi.n	80081d0 <UART_SetConfig+0x1f0>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <UART_SetConfig+0x1a8>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081a1 	.word	0x080081a1
 800818c:	080081a9 	.word	0x080081a9
 8008190:	080081b1 	.word	0x080081b1
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081a6:	e1ec      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081a8:	2304      	movs	r3, #4
 80081aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ae:	e1e8      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081b0:	2308      	movs	r3, #8
 80081b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081b6:	e1e4      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081b8:	2310      	movs	r3, #16
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081be:	e1e0      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081c0:	2320      	movs	r3, #32
 80081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c6:	e1dc      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ce:	e1d8      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e1d4      	b.n	8008582 <UART_SetConfig+0x5a2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a51      	ldr	r2, [pc, #324]	; (8008324 <UART_SetConfig+0x344>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d130      	bne.n	8008244 <UART_SetConfig+0x264>
 80081e2:	4b4e      	ldr	r3, [pc, #312]	; (800831c <UART_SetConfig+0x33c>)
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b05      	cmp	r3, #5
 80081ec:	d826      	bhi.n	800823c <UART_SetConfig+0x25c>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x214>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	0800820d 	.word	0x0800820d
 80081f8:	08008215 	.word	0x08008215
 80081fc:	0800821d 	.word	0x0800821d
 8008200:	08008225 	.word	0x08008225
 8008204:	0800822d 	.word	0x0800822d
 8008208:	08008235 	.word	0x08008235
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008212:	e1b6      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008214:	2304      	movs	r3, #4
 8008216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821a:	e1b2      	b.n	8008582 <UART_SetConfig+0x5a2>
 800821c:	2308      	movs	r3, #8
 800821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008222:	e1ae      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822a:	e1aa      	b.n	8008582 <UART_SetConfig+0x5a2>
 800822c:	2320      	movs	r3, #32
 800822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008232:	e1a6      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823a:	e1a2      	b.n	8008582 <UART_SetConfig+0x5a2>
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e19e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a37      	ldr	r2, [pc, #220]	; (8008328 <UART_SetConfig+0x348>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d130      	bne.n	80082b0 <UART_SetConfig+0x2d0>
 800824e:	4b33      	ldr	r3, [pc, #204]	; (800831c <UART_SetConfig+0x33c>)
 8008250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b05      	cmp	r3, #5
 8008258:	d826      	bhi.n	80082a8 <UART_SetConfig+0x2c8>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <UART_SetConfig+0x280>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008279 	.word	0x08008279
 8008264:	08008281 	.word	0x08008281
 8008268:	08008289 	.word	0x08008289
 800826c:	08008291 	.word	0x08008291
 8008270:	08008299 	.word	0x08008299
 8008274:	080082a1 	.word	0x080082a1
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827e:	e180      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008280:	2304      	movs	r3, #4
 8008282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008286:	e17c      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008288:	2308      	movs	r3, #8
 800828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828e:	e178      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008290:	2310      	movs	r3, #16
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008296:	e174      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008298:	2320      	movs	r3, #32
 800829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829e:	e170      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e16c      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082a8:	2380      	movs	r3, #128	; 0x80
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e168      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1d      	ldr	r2, [pc, #116]	; (800832c <UART_SetConfig+0x34c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d142      	bne.n	8008340 <UART_SetConfig+0x360>
 80082ba:	4b18      	ldr	r3, [pc, #96]	; (800831c <UART_SetConfig+0x33c>)
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d838      	bhi.n	8008338 <UART_SetConfig+0x358>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x2ec>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	08008305 	.word	0x08008305
 80082e0:	08008331 	.word	0x08008331
 80082e4:	2300      	movs	r3, #0
 80082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ea:	e14a      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e146      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e142      	b.n	8008582 <UART_SetConfig+0x5a2>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e13e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008304:	2320      	movs	r3, #32
 8008306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830a:	e13a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800830c:	cfff69f3 	.word	0xcfff69f3
 8008310:	58000c00 	.word	0x58000c00
 8008314:	11fff4ff 	.word	0x11fff4ff
 8008318:	40011000 	.word	0x40011000
 800831c:	58024400 	.word	0x58024400
 8008320:	40004400 	.word	0x40004400
 8008324:	40004800 	.word	0x40004800
 8008328:	40004c00 	.word	0x40004c00
 800832c:	40005000 	.word	0x40005000
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008336:	e124      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008338:	2380      	movs	r3, #128	; 0x80
 800833a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833e:	e120      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4acc      	ldr	r2, [pc, #816]	; (8008678 <UART_SetConfig+0x698>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d176      	bne.n	8008438 <UART_SetConfig+0x458>
 800834a:	4bcc      	ldr	r3, [pc, #816]	; (800867c <UART_SetConfig+0x69c>)
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008352:	2b28      	cmp	r3, #40	; 0x28
 8008354:	d86c      	bhi.n	8008430 <UART_SetConfig+0x450>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <UART_SetConfig+0x37c>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008401 	.word	0x08008401
 8008360:	08008431 	.word	0x08008431
 8008364:	08008431 	.word	0x08008431
 8008368:	08008431 	.word	0x08008431
 800836c:	08008431 	.word	0x08008431
 8008370:	08008431 	.word	0x08008431
 8008374:	08008431 	.word	0x08008431
 8008378:	08008431 	.word	0x08008431
 800837c:	08008409 	.word	0x08008409
 8008380:	08008431 	.word	0x08008431
 8008384:	08008431 	.word	0x08008431
 8008388:	08008431 	.word	0x08008431
 800838c:	08008431 	.word	0x08008431
 8008390:	08008431 	.word	0x08008431
 8008394:	08008431 	.word	0x08008431
 8008398:	08008431 	.word	0x08008431
 800839c:	08008411 	.word	0x08008411
 80083a0:	08008431 	.word	0x08008431
 80083a4:	08008431 	.word	0x08008431
 80083a8:	08008431 	.word	0x08008431
 80083ac:	08008431 	.word	0x08008431
 80083b0:	08008431 	.word	0x08008431
 80083b4:	08008431 	.word	0x08008431
 80083b8:	08008431 	.word	0x08008431
 80083bc:	08008419 	.word	0x08008419
 80083c0:	08008431 	.word	0x08008431
 80083c4:	08008431 	.word	0x08008431
 80083c8:	08008431 	.word	0x08008431
 80083cc:	08008431 	.word	0x08008431
 80083d0:	08008431 	.word	0x08008431
 80083d4:	08008431 	.word	0x08008431
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008421 	.word	0x08008421
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008431 	.word	0x08008431
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008431 	.word	0x08008431
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
 80083fc:	08008429 	.word	0x08008429
 8008400:	2301      	movs	r3, #1
 8008402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008406:	e0bc      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008408:	2304      	movs	r3, #4
 800840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840e:	e0b8      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008410:	2308      	movs	r3, #8
 8008412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008416:	e0b4      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008418:	2310      	movs	r3, #16
 800841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841e:	e0b0      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008420:	2320      	movs	r3, #32
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008426:	e0ac      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008428:	2340      	movs	r3, #64	; 0x40
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e0a8      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e0a4      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a90      	ldr	r2, [pc, #576]	; (8008680 <UART_SetConfig+0x6a0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d130      	bne.n	80084a4 <UART_SetConfig+0x4c4>
 8008442:	4b8e      	ldr	r3, [pc, #568]	; (800867c <UART_SetConfig+0x69c>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b05      	cmp	r3, #5
 800844c:	d826      	bhi.n	800849c <UART_SetConfig+0x4bc>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0x474>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	0800846d 	.word	0x0800846d
 8008458:	08008475 	.word	0x08008475
 800845c:	0800847d 	.word	0x0800847d
 8008460:	08008485 	.word	0x08008485
 8008464:	0800848d 	.word	0x0800848d
 8008468:	08008495 	.word	0x08008495
 800846c:	2300      	movs	r3, #0
 800846e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008472:	e086      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847a:	e082      	b.n	8008582 <UART_SetConfig+0x5a2>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008482:	e07e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800848a:	e07a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008492:	e076      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849a:	e072      	b.n	8008582 <UART_SetConfig+0x5a2>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a2:	e06e      	b.n	8008582 <UART_SetConfig+0x5a2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a76      	ldr	r2, [pc, #472]	; (8008684 <UART_SetConfig+0x6a4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d130      	bne.n	8008510 <UART_SetConfig+0x530>
 80084ae:	4b73      	ldr	r3, [pc, #460]	; (800867c <UART_SetConfig+0x69c>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	d826      	bhi.n	8008508 <UART_SetConfig+0x528>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0x4e0>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084e9 	.word	0x080084e9
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	08008501 	.word	0x08008501
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084de:	e050      	b.n	8008582 <UART_SetConfig+0x5a2>
 80084e0:	2304      	movs	r3, #4
 80084e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e6:	e04c      	b.n	8008582 <UART_SetConfig+0x5a2>
 80084e8:	2308      	movs	r3, #8
 80084ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ee:	e048      	b.n	8008582 <UART_SetConfig+0x5a2>
 80084f0:	2310      	movs	r3, #16
 80084f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f6:	e044      	b.n	8008582 <UART_SetConfig+0x5a2>
 80084f8:	2320      	movs	r3, #32
 80084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fe:	e040      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008500:	2340      	movs	r3, #64	; 0x40
 8008502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008506:	e03c      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008508:	2380      	movs	r3, #128	; 0x80
 800850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850e:	e038      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a5c      	ldr	r2, [pc, #368]	; (8008688 <UART_SetConfig+0x6a8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d130      	bne.n	800857c <UART_SetConfig+0x59c>
 800851a:	4b58      	ldr	r3, [pc, #352]	; (800867c <UART_SetConfig+0x69c>)
 800851c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b05      	cmp	r3, #5
 8008524:	d826      	bhi.n	8008574 <UART_SetConfig+0x594>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <UART_SetConfig+0x54c>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008545 	.word	0x08008545
 8008530:	0800854d 	.word	0x0800854d
 8008534:	08008555 	.word	0x08008555
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	2302      	movs	r3, #2
 8008546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800854a:	e01a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800854c:	2304      	movs	r3, #4
 800854e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008552:	e016      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008554:	2308      	movs	r3, #8
 8008556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800855a:	e012      	b.n	8008582 <UART_SetConfig+0x5a2>
 800855c:	2310      	movs	r3, #16
 800855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008562:	e00e      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008564:	2320      	movs	r3, #32
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e00a      	b.n	8008582 <UART_SetConfig+0x5a2>
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e006      	b.n	8008582 <UART_SetConfig+0x5a2>
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e002      	b.n	8008582 <UART_SetConfig+0x5a2>
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a40      	ldr	r2, [pc, #256]	; (8008688 <UART_SetConfig+0x6a8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	f040 80ef 	bne.w	800876c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800858e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008592:	2b20      	cmp	r3, #32
 8008594:	dc46      	bgt.n	8008624 <UART_SetConfig+0x644>
 8008596:	2b02      	cmp	r3, #2
 8008598:	f2c0 8081 	blt.w	800869e <UART_SetConfig+0x6be>
 800859c:	3b02      	subs	r3, #2
 800859e:	2b1e      	cmp	r3, #30
 80085a0:	d87d      	bhi.n	800869e <UART_SetConfig+0x6be>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <UART_SetConfig+0x5c8>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	0800862b 	.word	0x0800862b
 80085ac:	0800869f 	.word	0x0800869f
 80085b0:	08008633 	.word	0x08008633
 80085b4:	0800869f 	.word	0x0800869f
 80085b8:	0800869f 	.word	0x0800869f
 80085bc:	0800869f 	.word	0x0800869f
 80085c0:	08008643 	.word	0x08008643
 80085c4:	0800869f 	.word	0x0800869f
 80085c8:	0800869f 	.word	0x0800869f
 80085cc:	0800869f 	.word	0x0800869f
 80085d0:	0800869f 	.word	0x0800869f
 80085d4:	0800869f 	.word	0x0800869f
 80085d8:	0800869f 	.word	0x0800869f
 80085dc:	0800869f 	.word	0x0800869f
 80085e0:	08008653 	.word	0x08008653
 80085e4:	0800869f 	.word	0x0800869f
 80085e8:	0800869f 	.word	0x0800869f
 80085ec:	0800869f 	.word	0x0800869f
 80085f0:	0800869f 	.word	0x0800869f
 80085f4:	0800869f 	.word	0x0800869f
 80085f8:	0800869f 	.word	0x0800869f
 80085fc:	0800869f 	.word	0x0800869f
 8008600:	0800869f 	.word	0x0800869f
 8008604:	0800869f 	.word	0x0800869f
 8008608:	0800869f 	.word	0x0800869f
 800860c:	0800869f 	.word	0x0800869f
 8008610:	0800869f 	.word	0x0800869f
 8008614:	0800869f 	.word	0x0800869f
 8008618:	0800869f 	.word	0x0800869f
 800861c:	0800869f 	.word	0x0800869f
 8008620:	08008691 	.word	0x08008691
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d036      	beq.n	8008696 <UART_SetConfig+0x6b6>
 8008628:	e039      	b.n	800869e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800862a:	f7fd fb0b 	bl	8005c44 <HAL_RCCEx_GetD3PCLK1Freq>
 800862e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008630:	e03b      	b.n	80086aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008632:	f107 0314 	add.w	r3, r7, #20
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd fb1a 	bl	8005c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008640:	e033      	b.n	80086aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008642:	f107 0308 	add.w	r3, r7, #8
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fc66 	bl	8005f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008650:	e02b      	b.n	80086aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <UART_SetConfig+0x69c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <UART_SetConfig+0x69c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	08db      	lsrs	r3, r3, #3
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	4a08      	ldr	r2, [pc, #32]	; (800868c <UART_SetConfig+0x6ac>)
 800866a:	fa22 f303 	lsr.w	r3, r2, r3
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008670:	e01b      	b.n	80086aa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <UART_SetConfig+0x6ac>)
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008676:	e018      	b.n	80086aa <UART_SetConfig+0x6ca>
 8008678:	40011400 	.word	0x40011400
 800867c:	58024400 	.word	0x58024400
 8008680:	40007800 	.word	0x40007800
 8008684:	40007c00 	.word	0x40007c00
 8008688:	58000c00 	.word	0x58000c00
 800868c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008690:	4bc4      	ldr	r3, [pc, #784]	; (80089a4 <UART_SetConfig+0x9c4>)
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008694:	e009      	b.n	80086aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800869c:	e005      	b.n	80086aa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80086a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 81da 	beq.w	8008a66 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	4abc      	ldr	r2, [pc, #752]	; (80089a8 <UART_SetConfig+0x9c8>)
 80086b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086bc:	461a      	mov	r2, r3
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	6a3a      	ldr	r2, [r7, #32]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d305      	bcc.n	80086e2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d903      	bls.n	80086ea <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80086e8:	e1bd      	b.n	8008a66 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	4618      	mov	r0, r3
 80086ee:	f04f 0100 	mov.w	r1, #0
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	4aac      	ldr	r2, [pc, #688]	; (80089a8 <UART_SetConfig+0x9c8>)
 80086f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	f7f7 fde9 	bl	80002d8 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4610      	mov	r0, r2
 800870c:	4619      	mov	r1, r3
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	020b      	lsls	r3, r1, #8
 8008718:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800871c:	0202      	lsls	r2, r0, #8
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	6849      	ldr	r1, [r1, #4]
 8008722:	0849      	lsrs	r1, r1, #1
 8008724:	4608      	mov	r0, r1
 8008726:	f04f 0100 	mov.w	r1, #0
 800872a:	1814      	adds	r4, r2, r0
 800872c:	eb43 0501 	adc.w	r5, r3, r1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	461a      	mov	r2, r3
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f7f7 fdcb 	bl	80002d8 <__aeabi_uldivmod>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4613      	mov	r3, r2
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008750:	d308      	bcc.n	8008764 <UART_SetConfig+0x784>
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008758:	d204      	bcs.n	8008764 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e180      	b.n	8008a66 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800876a:	e17c      	b.n	8008a66 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008774:	f040 80be 	bne.w	80088f4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8008778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800877c:	2b20      	cmp	r3, #32
 800877e:	dc49      	bgt.n	8008814 <UART_SetConfig+0x834>
 8008780:	2b00      	cmp	r3, #0
 8008782:	db7c      	blt.n	800887e <UART_SetConfig+0x89e>
 8008784:	2b20      	cmp	r3, #32
 8008786:	d87a      	bhi.n	800887e <UART_SetConfig+0x89e>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <UART_SetConfig+0x7b0>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	0800881b 	.word	0x0800881b
 8008794:	08008823 	.word	0x08008823
 8008798:	0800887f 	.word	0x0800887f
 800879c:	0800887f 	.word	0x0800887f
 80087a0:	0800882b 	.word	0x0800882b
 80087a4:	0800887f 	.word	0x0800887f
 80087a8:	0800887f 	.word	0x0800887f
 80087ac:	0800887f 	.word	0x0800887f
 80087b0:	0800883b 	.word	0x0800883b
 80087b4:	0800887f 	.word	0x0800887f
 80087b8:	0800887f 	.word	0x0800887f
 80087bc:	0800887f 	.word	0x0800887f
 80087c0:	0800887f 	.word	0x0800887f
 80087c4:	0800887f 	.word	0x0800887f
 80087c8:	0800887f 	.word	0x0800887f
 80087cc:	0800887f 	.word	0x0800887f
 80087d0:	0800884b 	.word	0x0800884b
 80087d4:	0800887f 	.word	0x0800887f
 80087d8:	0800887f 	.word	0x0800887f
 80087dc:	0800887f 	.word	0x0800887f
 80087e0:	0800887f 	.word	0x0800887f
 80087e4:	0800887f 	.word	0x0800887f
 80087e8:	0800887f 	.word	0x0800887f
 80087ec:	0800887f 	.word	0x0800887f
 80087f0:	0800887f 	.word	0x0800887f
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	0800887f 	.word	0x0800887f
 80087fc:	0800887f 	.word	0x0800887f
 8008800:	0800887f 	.word	0x0800887f
 8008804:	0800887f 	.word	0x0800887f
 8008808:	0800887f 	.word	0x0800887f
 800880c:	0800887f 	.word	0x0800887f
 8008810:	08008871 	.word	0x08008871
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	d02e      	beq.n	8008876 <UART_SetConfig+0x896>
 8008818:	e031      	b.n	800887e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800881a:	f7fc faa7 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 800881e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008820:	e033      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008822:	f7fc fab9 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8008826:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008828:	e02f      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd fa1e 	bl	8005c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008838:	e027      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fb6a 	bl	8005f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008848:	e01f      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884a:	4b58      	ldr	r3, [pc, #352]	; (80089ac <UART_SetConfig+0x9cc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008856:	4b55      	ldr	r3, [pc, #340]	; (80089ac <UART_SetConfig+0x9cc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	08db      	lsrs	r3, r3, #3
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	4a53      	ldr	r2, [pc, #332]	; (80089b0 <UART_SetConfig+0x9d0>)
 8008862:	fa22 f303 	lsr.w	r3, r2, r3
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008868:	e00f      	b.n	800888a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800886a:	4b51      	ldr	r3, [pc, #324]	; (80089b0 <UART_SetConfig+0x9d0>)
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800886e:	e00c      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008870:	4b4c      	ldr	r3, [pc, #304]	; (80089a4 <UART_SetConfig+0x9c4>)
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008874:	e009      	b.n	800888a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800887c:	e005      	b.n	800888a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 80ea 	beq.w	8008a66 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	4a44      	ldr	r2, [pc, #272]	; (80089a8 <UART_SetConfig+0x9c8>)
 8008898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889c:	461a      	mov	r2, r3
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a4:	005a      	lsls	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	d916      	bls.n	80088ec <UART_SetConfig+0x90c>
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d212      	bcs.n	80088ec <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f023 030f 	bic.w	r3, r3, #15
 80088ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	b29a      	uxth	r2, r3
 80088dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088de:	4313      	orrs	r3, r2
 80088e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0bc      	b.n	8008a66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80088f2:	e0b8      	b.n	8008a66 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	dc4b      	bgt.n	8008994 <UART_SetConfig+0x9b4>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f2c0 8087 	blt.w	8008a10 <UART_SetConfig+0xa30>
 8008902:	2b20      	cmp	r3, #32
 8008904:	f200 8084 	bhi.w	8008a10 <UART_SetConfig+0xa30>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <UART_SetConfig+0x930>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	0800899b 	.word	0x0800899b
 8008914:	080089b5 	.word	0x080089b5
 8008918:	08008a11 	.word	0x08008a11
 800891c:	08008a11 	.word	0x08008a11
 8008920:	080089bd 	.word	0x080089bd
 8008924:	08008a11 	.word	0x08008a11
 8008928:	08008a11 	.word	0x08008a11
 800892c:	08008a11 	.word	0x08008a11
 8008930:	080089cd 	.word	0x080089cd
 8008934:	08008a11 	.word	0x08008a11
 8008938:	08008a11 	.word	0x08008a11
 800893c:	08008a11 	.word	0x08008a11
 8008940:	08008a11 	.word	0x08008a11
 8008944:	08008a11 	.word	0x08008a11
 8008948:	08008a11 	.word	0x08008a11
 800894c:	08008a11 	.word	0x08008a11
 8008950:	080089dd 	.word	0x080089dd
 8008954:	08008a11 	.word	0x08008a11
 8008958:	08008a11 	.word	0x08008a11
 800895c:	08008a11 	.word	0x08008a11
 8008960:	08008a11 	.word	0x08008a11
 8008964:	08008a11 	.word	0x08008a11
 8008968:	08008a11 	.word	0x08008a11
 800896c:	08008a11 	.word	0x08008a11
 8008970:	08008a11 	.word	0x08008a11
 8008974:	08008a11 	.word	0x08008a11
 8008978:	08008a11 	.word	0x08008a11
 800897c:	08008a11 	.word	0x08008a11
 8008980:	08008a11 	.word	0x08008a11
 8008984:	08008a11 	.word	0x08008a11
 8008988:	08008a11 	.word	0x08008a11
 800898c:	08008a11 	.word	0x08008a11
 8008990:	08008a03 	.word	0x08008a03
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d037      	beq.n	8008a08 <UART_SetConfig+0xa28>
 8008998:	e03a      	b.n	8008a10 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899a:	f7fc f9e7 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 800899e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089a0:	e03c      	b.n	8008a1c <UART_SetConfig+0xa3c>
 80089a2:	bf00      	nop
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	08009d34 	.word	0x08009d34
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b4:	f7fc f9f0 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 80089b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089ba:	e02f      	b.n	8008a1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd f955 	bl	8005c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089ca:	e027      	b.n	8008a1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd faa1 	bl	8005f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089da:	e01f      	b.n	8008a1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089dc:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <UART_SetConfig+0xab0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089e8:	4b29      	ldr	r3, [pc, #164]	; (8008a90 <UART_SetConfig+0xab0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <UART_SetConfig+0xab4>)
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089fa:	e00f      	b.n	8008a1c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <UART_SetConfig+0xab4>)
 80089fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a00:	e00c      	b.n	8008a1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a02:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <UART_SetConfig+0xab8>)
 8008a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a06:	e009      	b.n	8008a1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a0e:	e005      	b.n	8008a1c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d021      	beq.n	8008a66 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <UART_SetConfig+0xabc>)
 8008a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2b0f      	cmp	r3, #15
 8008a4a:	d909      	bls.n	8008a60 <UART_SetConfig+0xa80>
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a52:	d205      	bcs.n	8008a60 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	e002      	b.n	8008a66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3738      	adds	r7, #56	; 0x38
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	58024400 	.word	0x58024400
 8008a94:	03d09000 	.word	0x03d09000
 8008a98:	003d0900 	.word	0x003d0900
 8008a9c:	08009d34 	.word	0x08009d34

08008aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9e:	d10a      	bne.n	8008bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf4:	f7f8 faee 	bl	80011d4 <HAL_GetTick>
 8008bf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0308 	and.w	r3, r3, #8
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d10e      	bne.n	8008c26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f82f 	bl	8008c7a <UART_WaitOnFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e025      	b.n	8008c72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d10e      	bne.n	8008c52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f819 	bl	8008c7a <UART_WaitOnFlagUntilTimeout>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e00f      	b.n	8008c72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b09c      	sub	sp, #112	; 0x70
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c8a:	e0a9      	b.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	f000 80a5 	beq.w	8008de0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c96:	f7f8 fa9d 	bl	80011d4 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d302      	bcc.n	8008cac <UART_WaitOnFlagUntilTimeout+0x32>
 8008ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d140      	bne.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ccc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e6      	bne.n	8008cac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e5      	bne.n	8008cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e069      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d051      	beq.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4a:	d149      	bne.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
 8008d76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e6      	bne.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 0301 	bic.w	r3, r3, #1
 8008d9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da8:	623a      	str	r2, [r7, #32]
 8008daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e5      	bne.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e010      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69da      	ldr	r2, [r3, #28]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4013      	ands	r3, r2
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	bf0c      	ite	eq
 8008df0:	2301      	moveq	r3, #1
 8008df2:	2300      	movne	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f43f af46 	beq.w	8008c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3770      	adds	r7, #112	; 0x70
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b0a3      	sub	sp, #140	; 0x8c
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3e:	d10e      	bne.n	8008e5e <UART_Start_Receive_IT+0x52>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <UART_Start_Receive_IT+0x48>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e52:	e02d      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	22ff      	movs	r2, #255	; 0xff
 8008e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e5c:	e028      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10d      	bne.n	8008e82 <UART_Start_Receive_IT+0x76>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <UART_Start_Receive_IT+0x6c>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	22ff      	movs	r2, #255	; 0xff
 8008e72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e76:	e01b      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	227f      	movs	r2, #127	; 0x7f
 8008e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e80:	e016      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e8a:	d10d      	bne.n	8008ea8 <UART_Start_Receive_IT+0x9c>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <UART_Start_Receive_IT+0x92>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	227f      	movs	r2, #127	; 0x7f
 8008e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e9c:	e008      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	223f      	movs	r2, #63	; 0x3f
 8008ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ea6:	e003      	b.n	8008eb0 <UART_Start_Receive_IT+0xa4>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2222      	movs	r2, #34	; 0x22
 8008ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ee4:	673a      	str	r2, [r7, #112]	; 0x70
 8008ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008eea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e3      	bne.n	8008ec0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f00:	d153      	bne.n	8008faa <UART_Start_Receive_IT+0x19e>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f08:	88fa      	ldrh	r2, [r7, #6]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d34d      	bcc.n	8008faa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f16:	d107      	bne.n	8008f28 <UART_Start_Receive_IT+0x11c>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a4b      	ldr	r2, [pc, #300]	; (8009050 <UART_Start_Receive_IT+0x244>)
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70
 8008f26:	e002      	b.n	8008f2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4a4a      	ldr	r2, [pc, #296]	; (8009054 <UART_Start_Receive_IT+0x248>)
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01a      	beq.n	8008f74 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f62:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e4      	bne.n	8008f3e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f94:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_Start_Receive_IT+0x168>
 8008fa8:	e04a      	b.n	8009040 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb2:	d107      	bne.n	8008fc4 <UART_Start_Receive_IT+0x1b8>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <UART_Start_Receive_IT+0x24c>)
 8008fc0:	671a      	str	r2, [r3, #112]	; 0x70
 8008fc2:	e002      	b.n	8008fca <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a25      	ldr	r2, [pc, #148]	; (800905c <UART_Start_Receive_IT+0x250>)
 8008fc8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d019      	beq.n	800900e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008fee:	677b      	str	r3, [r7, #116]	; 0x74
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_Start_Receive_IT+0x1ce>
 800900c:	e018      	b.n	8009040 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	613b      	str	r3, [r7, #16]
   return(result);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f043 0320 	orr.w	r3, r3, #32
 8009022:	67bb      	str	r3, [r7, #120]	; 0x78
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902c:	623b      	str	r3, [r7, #32]
 800902e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	6a3a      	ldr	r2, [r7, #32]
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	61bb      	str	r3, [r7, #24]
   return(result);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e6      	bne.n	800900e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	378c      	adds	r7, #140	; 0x8c
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	08009769 	.word	0x08009769
 8009054:	08009471 	.word	0x08009471
 8009058:	0800930f 	.word	0x0800930f
 800905c:	080091af 	.word	0x080091af

08009060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b095      	sub	sp, #84	; 0x54
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800907c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009086:	643b      	str	r3, [r7, #64]	; 0x40
 8009088:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800908c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3308      	adds	r3, #8
 80090a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <UART_EndRxTransfer+0xc8>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e5      	bne.n	800909a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d118      	bne.n	8009108 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f023 0310 	bic.w	r3, r3, #16
 80090ea:	647b      	str	r3, [r7, #68]	; 0x44
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6979      	ldr	r1, [r7, #20]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	613b      	str	r3, [r7, #16]
   return(result);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800911c:	bf00      	nop
 800911e:	3754      	adds	r7, #84	; 0x54
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	effffffe 	.word	0xeffffffe

0800912c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7fe ff32 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	60bb      	str	r3, [r7, #8]
   return(result);
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	61bb      	str	r3, [r7, #24]
 8009180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6979      	ldr	r1, [r7, #20]
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	613b      	str	r3, [r7, #16]
   return(result);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e6      	bne.n	8009160 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fe fef3 	bl	8007f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a6:	bf00      	nop
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b096      	sub	sp, #88	; 0x58
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c6:	2b22      	cmp	r3, #34	; 0x22
 80091c8:	f040 8095 	bne.w	80092f6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091da:	b2d9      	uxtb	r1, r3
 80091dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	400a      	ands	r2, r1
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d178      	bne.n	8009306 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009228:	653b      	str	r3, [r7, #80]	; 0x50
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009232:	647b      	str	r3, [r7, #68]	; 0x44
 8009234:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e6      	bne.n	8009214 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	623b      	str	r3, [r7, #32]
   return(result);
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009266:	633a      	str	r2, [r7, #48]	; 0x30
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800926c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e5      	bne.n	8009246 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928c:	2b01      	cmp	r3, #1
 800928e:	d12e      	bne.n	80092ee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0310 	bic.w	r3, r3, #16
 80092aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	617b      	str	r3, [r7, #20]
   return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b10      	cmp	r3, #16
 80092d4:	d103      	bne.n	80092de <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2210      	movs	r2, #16
 80092dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fe fe6e 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092ec:	e00b      	b.n	8009306 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7fe fe56 	bl	8007fa0 <HAL_UART_RxCpltCallback>
}
 80092f4:	e007      	b.n	8009306 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f042 0208 	orr.w	r2, r2, #8
 8009304:	619a      	str	r2, [r3, #24]
}
 8009306:	bf00      	nop
 8009308:	3758      	adds	r7, #88	; 0x58
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b096      	sub	sp, #88	; 0x58
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800931c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009326:	2b22      	cmp	r3, #34	; 0x22
 8009328:	f040 8095 	bne.w	8009456 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800933c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009340:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009344:	4013      	ands	r3, r2
 8009346:	b29a      	uxth	r2, r3
 8009348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800934a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d178      	bne.n	8009466 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009392:	643b      	str	r3, [r7, #64]	; 0x40
 8009394:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e6      	bne.n	8009374 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e5      	bne.n	80093a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d12e      	bne.n	800944e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	60bb      	str	r3, [r7, #8]
   return(result);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f023 0310 	bic.w	r3, r3, #16
 800940a:	647b      	str	r3, [r7, #68]	; 0x44
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	613b      	str	r3, [r7, #16]
   return(result);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b10      	cmp	r3, #16
 8009434:	d103      	bne.n	800943e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2210      	movs	r2, #16
 800943c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fe fdbe 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800944c:	e00b      	b.n	8009466 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fe fda6 	bl	8007fa0 <HAL_UART_RxCpltCallback>
}
 8009454:	e007      	b.n	8009466 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699a      	ldr	r2, [r3, #24]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0208 	orr.w	r2, r2, #8
 8009464:	619a      	str	r2, [r3, #24]
}
 8009466:	bf00      	nop
 8009468:	3758      	adds	r7, #88	; 0x58
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b0a6      	sub	sp, #152	; 0x98
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800947e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a6:	2b22      	cmp	r3, #34	; 0x22
 80094a8:	f040 814d 	bne.w	8009746 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094b6:	e0f4      	b.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094c2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80094c6:	b2d9      	uxtb	r1, r3
 80094c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	400a      	ands	r2, r1
 80094d4:	b2d2      	uxtb	r2, r2
 80094d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d053      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800950a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d011      	beq.n	800953a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800951a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2201      	movs	r2, #1
 8009528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009530:	f043 0201 	orr.w	r2, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800953a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2202      	movs	r2, #2
 8009558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009560:	f043 0204 	orr.w	r2, r3, #4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d011      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2204      	movs	r2, #4
 8009588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009590:	f043 0202 	orr.w	r2, r3, #2
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7fe fd05 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d171      	bne.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80095cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80095e2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80095e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e4      	bne.n	80095be <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3308      	adds	r3, #8
 80095fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009606:	4b56      	ldr	r3, [pc, #344]	; (8009760 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009608:	4013      	ands	r3, r2
 800960a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009614:	657a      	str	r2, [r7, #84]	; 0x54
 8009616:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800961a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e5      	bne.n	80095f4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d12e      	bne.n	800969c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f023 0310 	bic.w	r3, r3, #16
 8009658:	67bb      	str	r3, [r7, #120]	; 0x78
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009662:	643b      	str	r3, [r7, #64]	; 0x40
 8009664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e6      	bne.n	8009644 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b10      	cmp	r3, #16
 8009682:	d103      	bne.n	800968c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2210      	movs	r2, #16
 800968a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7fe fc97 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
 800969a:	e002      	b.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fe fc7f 	bl	8007fa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80096aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f47f af00 	bne.w	80094b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d045      	beq.n	8009756 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d23e      	bcs.n	8009756 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ee:	673b      	str	r3, [r7, #112]	; 0x70
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e5      	bne.n	80096d8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a15      	ldr	r2, [pc, #84]	; (8009764 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009710:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f043 0320 	orr.w	r3, r3, #32
 8009726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	613b      	str	r3, [r7, #16]
   return(result);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e6      	bne.n	8009712 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009744:	e007      	b.n	8009756 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0208 	orr.w	r2, r2, #8
 8009754:	619a      	str	r2, [r3, #24]
}
 8009756:	bf00      	nop
 8009758:	3798      	adds	r7, #152	; 0x98
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	effffffe 	.word	0xeffffffe
 8009764:	080091af 	.word	0x080091af

08009768 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b0a8      	sub	sp, #160	; 0xa0
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009776:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979e:	2b22      	cmp	r3, #34	; 0x22
 80097a0:	f040 8151 	bne.w	8009a46 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ae:	e0f8      	b.n	80099a2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80097c2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80097c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097ca:	4013      	ands	r3, r2
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d8:	1c9a      	adds	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	2b00      	cmp	r3, #0
 8009804:	d053      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d011      	beq.n	8009836 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2201      	movs	r2, #1
 8009824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800982c:	f043 0201 	orr.w	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d011      	beq.n	8009866 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00b      	beq.n	8009866 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2202      	movs	r2, #2
 8009854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800985c:	f043 0204 	orr.w	r2, r3, #4
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800986a:	f003 0304 	and.w	r3, r3, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	d011      	beq.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2204      	movs	r2, #4
 8009884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800988c:	f043 0202 	orr.w	r2, r3, #2
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7fe fb87 	bl	8007fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d173      	bne.n	80099a2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098de:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e4      	bne.n	80098ba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3308      	adds	r3, #8
 80098f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009902:	4b57      	ldr	r3, [pc, #348]	; (8009a60 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009904:	4013      	ands	r3, r2
 8009906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009914:	65ba      	str	r2, [r7, #88]	; 0x58
 8009916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800991a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e3      	bne.n	80098f0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d12e      	bne.n	800999c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	f023 0310 	bic.w	r3, r3, #16
 8009958:	67fb      	str	r3, [r7, #124]	; 0x7c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009962:	647b      	str	r3, [r7, #68]	; 0x44
 8009964:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b10      	cmp	r3, #16
 8009982:	d103      	bne.n	800998c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2210      	movs	r2, #16
 800998a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7fe fb17 	bl	8007fc8 <HAL_UARTEx_RxEventCallback>
 800999a:	e002      	b.n	80099a2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fe faff 	bl	8007fa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d006      	beq.n	80099b8 <UART_RxISR_16BIT_FIFOEN+0x250>
 80099aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f47f aefc 	bne.w	80097b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099be:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d045      	beq.n	8009a56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099d0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d23e      	bcs.n	8009a56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	623b      	str	r3, [r7, #32]
   return(result);
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ee:	677b      	str	r3, [r7, #116]	; 0x74
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3308      	adds	r3, #8
 80099f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099f8:	633a      	str	r2, [r7, #48]	; 0x30
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e5      	bne.n	80099d8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a15      	ldr	r2, [pc, #84]	; (8009a64 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009a10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f043 0320 	orr.w	r3, r3, #32
 8009a26:	673b      	str	r3, [r7, #112]	; 0x70
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	69b9      	ldr	r1, [r7, #24]
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e6      	bne.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a44:	e007      	b.n	8009a56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0208 	orr.w	r2, r2, #8
 8009a54:	619a      	str	r2, [r3, #24]
}
 8009a56:	bf00      	nop
 8009a58:	37a0      	adds	r7, #160	; 0xa0
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	effffffe 	.word	0xeffffffe
 8009a64:	0800930f 	.word	0x0800930f

08009a68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_UARTEx_DisableFifoMode+0x16>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e027      	b.n	8009b0a <HAL_UARTEx_DisableFifoMode+0x66>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2224      	movs	r2, #36	; 0x24
 8009ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ae8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e02d      	b.n	8009b8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	; 0x24
 8009b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f850 	bl	8009c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e02d      	b.n	8009c06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2224      	movs	r2, #36	; 0x24
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f812 	bl	8009c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d108      	bne.n	8009c32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c30:	e031      	b.n	8009c96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c32:	2310      	movs	r3, #16
 8009c34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c36:	2310      	movs	r3, #16
 8009c38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	0e5b      	lsrs	r3, r3, #25
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f003 0307 	and.w	r3, r3, #7
 8009c48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	0f5b      	lsrs	r3, r3, #29
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f003 0307 	and.w	r3, r3, #7
 8009c58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	7b3a      	ldrb	r2, [r7, #12]
 8009c5e:	4911      	ldr	r1, [pc, #68]	; (8009ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c60:	5c8a      	ldrb	r2, [r1, r2]
 8009c62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c66:	7b3a      	ldrb	r2, [r7, #12]
 8009c68:	490f      	ldr	r1, [pc, #60]	; (8009ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8009c6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	7b7a      	ldrb	r2, [r7, #13]
 8009c7c:	4909      	ldr	r1, [pc, #36]	; (8009ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c7e:	5c8a      	ldrb	r2, [r1, r2]
 8009c80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c84:	7b7a      	ldrb	r2, [r7, #13]
 8009c86:	4908      	ldr	r1, [pc, #32]	; (8009ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8009c88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	08009d4c 	.word	0x08009d4c
 8009ca8:	08009d54 	.word	0x08009d54

08009cac <__libc_init_array>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4d0d      	ldr	r5, [pc, #52]	; (8009ce4 <__libc_init_array+0x38>)
 8009cb0:	4c0d      	ldr	r4, [pc, #52]	; (8009ce8 <__libc_init_array+0x3c>)
 8009cb2:	1b64      	subs	r4, r4, r5
 8009cb4:	10a4      	asrs	r4, r4, #2
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	42a6      	cmp	r6, r4
 8009cba:	d109      	bne.n	8009cd0 <__libc_init_array+0x24>
 8009cbc:	4d0b      	ldr	r5, [pc, #44]	; (8009cec <__libc_init_array+0x40>)
 8009cbe:	4c0c      	ldr	r4, [pc, #48]	; (8009cf0 <__libc_init_array+0x44>)
 8009cc0:	f000 f820 	bl	8009d04 <_init>
 8009cc4:	1b64      	subs	r4, r4, r5
 8009cc6:	10a4      	asrs	r4, r4, #2
 8009cc8:	2600      	movs	r6, #0
 8009cca:	42a6      	cmp	r6, r4
 8009ccc:	d105      	bne.n	8009cda <__libc_init_array+0x2e>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd4:	4798      	blx	r3
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7ee      	b.n	8009cb8 <__libc_init_array+0xc>
 8009cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cde:	4798      	blx	r3
 8009ce0:	3601      	adds	r6, #1
 8009ce2:	e7f2      	b.n	8009cca <__libc_init_array+0x1e>
 8009ce4:	08009d64 	.word	0x08009d64
 8009ce8:	08009d64 	.word	0x08009d64
 8009cec:	08009d64 	.word	0x08009d64
 8009cf0:	08009d68 	.word	0x08009d68

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <_init>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr

08009d10 <_fini>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr
